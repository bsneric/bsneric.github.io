<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从黄仁勋身上看中层管理</title>
      <link href="/2025/09/22/25-%E4%BB%8E%E9%BB%84%E4%BB%81%E5%8B%8B%E8%BA%AB%E4%B8%8A%E7%9C%8B%E4%B8%AD%E5%B1%82%E7%AE%A1%E7%90%86/"/>
      <url>/2025/09/22/25-%E4%BB%8E%E9%BB%84%E4%BB%81%E5%8B%8B%E8%BA%AB%E4%B8%8A%E7%9C%8B%E4%B8%AD%E5%B1%82%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>黄仁勋，英伟达（NVIDIA）的创始人兼首席执行官，他应该是当前这个AI时代绝对的热点人物。2022年英伟达的全球员工是18975人，到2023年员工数达到了22473人。那么，作为这么大一个公司的CEO，他管理的直接下属，或者说直接向他汇报的人有多少呢？答案是50人。</p><p>2023年11月30日，黄仁勋接受了CNBC采访时，主持人问他：“听说你直接管理的人是40人？” 黄仁勋说：“不，50人”。主持人很好奇：“你可以管理这么多人吗？” 他的意思是这会很忙碌，应该越少人越好。</p><p>黄仁勋说，“CEO 的直接下属越多，公司的层级就越少。这样可以保持信息的流动性，”他还补充说这使得英伟达公司的表现更好。因为，首先这些高管应该都是领域内的顶尖人才，所以他可以放心地把事情交给他们做，他只要在业务关键的地方给出决策和建议，这些人也可以识别什么是需要他决策的。而他管理这么多直接下属的好处，还在于可以让公司更扁平化，这样信息传输的效率也就更高。</p><p>对比黄仁勋，我想说一个我身边的例子。我认识的一个公司高管，部门大概几百人吧，你知道向他汇报的有多少人吗？不超过10个，但是你知道他直接安排工作任务的多少人吗？答案几乎是部门人员的半数，因为很多事情他都是直接跨级安排。这造成的后果就是，很多人同时被安排好几件事，有自己团队领导安排的，也有这位高管安排的。为什么会这样做？因为他觉得这样效率更高，或者按照他的话说：“有些人很笨，安排的事情推不下去”。喔理解的潜台词就是，“我很聪明，他们做的事情我都不放心，只有我亲自安排的最可靠。” 后果是，整个部门都在疲于奔命，很多项目都出了问题。</p><p>原因在哪里？我分析有几个方面。首先，客观地讲我这位朋友的员工，尤其是中层干部，能力都不够，很多都是只有2～3年工作经验的人。我曾经问他为什么不招聘一些资深的人，答案是招不到。我很奇怪，按说人才市场是不缺人啊。其次，高管直接跨过中层安排工作，其实是对中层的不信任，反过来也验证了中层干部能力不足的情况。第三，我觉得就是管理风格了，管理者不愿意放手、不敢放手、不能放手实际上管理者本身的问题也很大。</p><p>上面这两个例子，我总结了几点我的想法：</p><ol><li><strong>一定要不惜成本找最合适的人</strong>：作为一个高管或者公司负责人，一定要找最合适的人。不能计较成本，不要觉得可以自己有能力把一个月薪20k的人，培养成一个年薪百万的中层。因为，一是这个过程的风险很大，有人本身学习能力的原因，二是也有很大的时间成本和试错成本，最后可能（肯定）会付出更高的代价。如果说创业初期没有那么多钱请高手，那么老板或者高管就给自己找一个助理，然后每件事都要花足够的心思，否则找一个不上不下的人，只会耽误事、浪费钱。</li><li><strong>要避免多层级汇报</strong>：就像黄仁勋的管理一样，让组织结构扁平化，加速信息的流动，提供公司运转的效率。</li><li><strong>用人不疑，疑人勿用</strong>：一旦选择了合适的人才，就放手让他去做，平时只要让对方做好汇报，及时识别风险即可。</li><li><strong>一旦出错，立即换人</strong>：经济学上有个说法叫“沉默成本”，意思是已经花出去的成本，对于沉默成本，在做出决策的时候是无需考虑的。对于人员的选用，不可能每次都选得那么合适，那么如初发现自己选人不对，就要立刻换人，不能因为已经让“他做了一段时间，现在换人前面的工作都浪费了”这种思想左右，因为那些都是沉默成本。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黄仁勋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做事一定要有清晰的目标，坚持到底</title>
      <link href="/2025/09/19/24-%E5%81%9A%E4%BA%8B%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89%E6%B8%85%E6%99%B0%E7%9A%84%E7%9B%AE%E6%A0%87%EF%BC%8C%E5%9D%9A%E6%8C%81%E5%88%B0%E5%BA%95/"/>
      <url>/2025/09/19/24-%E5%81%9A%E4%BA%8B%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89%E6%B8%85%E6%99%B0%E7%9A%84%E7%9B%AE%E6%A0%87%EF%BC%8C%E5%9D%9A%E6%8C%81%E5%88%B0%E5%BA%95/</url>
      
        <content type="html"><![CDATA[<p>亲爱的女儿，你好：</p><p>今天爸爸要跟你说说做事设立目标的事情。我这里说的做“事”，指的是那些相对正式一点的、或者说需要长期努力完成的事情。比如考试成绩、减肥效果、学习一个技能等等。</p><p>我们在做这类事情的时候往往要花大量的精力和时间，而精力和时间对于我们来说是最宝贵的，尤其是时间，过去了就没有了。</p><p>所以，在做一件事情的时候，一定要问自己几个问题：</p><ol><li>我做这件事是为什么？（要有明确的目的）</li><li>这件事做好了或者说做完了的标准是什么？（目标要清晰可衡量）</li></ol><p>如果上面两个问题回答后，你觉得目的明确（值得做）并且做事的结果也想清楚了（目标清晰可衡量），那么接下来的就是一鼓作气把他做完。</p><p>当然，完成这类事情（比如减肥、提供学习成绩）都是比较“辛苦”的一件事，所以要有一定的方法。爸爸觉得有以下几点你可以参考。</p><p>**首先，是要让你的目标“可触摸”，就是说一定要非常清晰。**比如，减肥。我说我要减肥10斤，这是一个目标，但是不够清晰。我们应该设置的目标是：我要在3个月内减肥10斤。这个目标才是清晰的。但是，有了清晰的目标后还不够，要对目标进行分解，比如可以把“3个月瘦10斤”，进一步分解为：每周瘦0.8斤 的一个小目标，然后为了实现小目标，可以把它分解为具体的行动，比如：每天跳绳500个+晚餐少吃或者不吃。</p><p>**其次，要给自己的目标加上“意义”。**我们都希望做完一件事有一些好处。所以，可以想想要完成的目标对自己有什么好处。比如，告诉自己减肥的好处：</p><ol><li>可以穿漂亮衣服</li><li>体育测试可以拿到好成绩</li><li>拍照更好看</li></ol><p>有了这些“意义”或者说“好处”，可以让我们更好地坚持下去。</p><p>**第三，用“小胜利”替代“大胜利”。**有时候我们要实现的目标需要花很长的时间，而且目标可能有点大。这时候要给自己一些“即时反馈”或者“即时奖励”。比如，最近你在减肥，我不知道你的大目标是什么，但是有一点你做得很好，那就是每天晚上称体重后看看自己瘦了多少，哪怕只有几十克，也是自己减肥效果的“小胜利”。</p><p><strong>第四，累了就歇一歇，接着再来</strong>。有时候一个大目标需要付出长期的努力，当初我们定的计划可能由于疲劳等原因，暂时不能坚持，那么没关系，让自己偶尔松懈一下也没关系。比如，我们想要提高数学成绩，于是定了一个计划，每天学习1小时。但是某一段时间实在是觉得这个事情很枯燥，那就中断一下，改成学习半小时，或者某个周末就不学了，休息一下。过了这个倦怠期之后，我们打起精神继续就好了。千万不要有：“一次松懈就等于全盘失败”的想法。其实这个就跟跑步一下，跑累了就歇一歇，然后举行跑。我们的目标是跑完400米或者2000米，中间歇一歇没关系的。</p><p>女儿，你妈妈昨天带你参加义工活动，说是有很多人参加，她看到大部分人都是在糊弄事，但是只有你认真地完成了要求的事情。我知道这种义工活动，对于你来说有点无聊，但是你既然参加了就实实在在地认真完成了，爸爸真为你感到骄傲。你践行了：认真做事，有始有终的好品格。</p><p>我亲爱的女儿，你非常优秀，希望你能永远快乐开心。</p><p>2025年7月8日 于望京南 公司办公室</p>]]></content>
      
      
      <categories>
          
          <category> 拾穗集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用“小行动”替代“大幻想”</title>
      <link href="/2025/09/19/23-%E7%94%A8%E5%B0%8F%E8%A1%8C%E5%8A%A8%E6%9B%BF%E4%BB%A3%E5%A4%A7%E5%B9%BB%E6%83%B3/"/>
      <url>/2025/09/19/23-%E7%94%A8%E5%B0%8F%E8%A1%8C%E5%8A%A8%E6%9B%BF%E4%BB%A3%E5%A4%A7%E5%B9%BB%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>亲爱的女儿，你好：</p><p>你有没有遇到过这样的事。某个人说：“我只是没努力，如果我努力了就一定能XXX。”“我只是没参加，如果我参加了一定能赢。”等等，类似说这样的话的人，或者抱有这样想法的人，最后他们说的那些事，都没有做成。这种情况很普遍，在心理学上讲是一种“自我保护防御机制”。它的核心逻辑是：通过强调“未付出努力”来维护“自己能力足够强”的积极自我认知，本质上是为了避免“可能失败”或者“能力不足”而损害自尊心。</p><p>比如有人期末挂科，却说 “我只是没复习，真复习了肯定能过”；看到同学考研上岸，随口说 “我要是考，清北都没问题，就是不想考”。其实背后的逻辑在于，用 “没付出努力” 掩盖 “可能基础差、学习能力不足” 或 “害怕考不上丢面子” 的现实。因为从未真正投入复习或备考，“我能行” 的假设永远不会被戳破，从而维持 “我智商在线，只是不屑于努力” 的自我认知。又比如，看到别人健身练出好身材，说 “我只是没时间，真练起来，马甲线一个月就能练出来”；朋友减肥成功，却说 “我要是少吃点，一周就能瘦 10 斤，只是不想委屈自己”。其实背后的逻辑是，高估 “短期努力” 的效果，低估 “长期坚持” 的难度。比如忽略健身需要科学方法（动作标准、饮食搭配），减肥需要打破身体代谢惯性（不是 “少吃” 就能简单实现），用 “我能轻松做到” 的幻想，掩盖 “害怕付出汗水、无法坚持” 的惰性。</p><p>人天生有维护“自我良好形象”的需求。所以，当我们面对“未达成的目标”或者“不敢尝试”的情况时，就会用“我只是没有努力”和“我要是做了肯定行”来掩盖担心失败和自己能力不足。</p><p>其实，人的能力是有边界的，并不是什么事情都可以做成。失败也不可怕，爸爸以前给你也写过，我们之所以努力是为了增加事情成功的概率。所以，与其担心失败，还不如先把事情做起来。</p><p>爸爸想给你的一个建议是：用“小行动”替代“大幻想”。通过具体、可落地的微小行为，打破 “我要是做了就一定行” 的空想循环，用真实的体验和反馈替代虚无的自我安慰，最终建立基于现实的自信。这种方式的关键在于：不追求 “一步到位”，而是聚焦 “立刻能做的小事”，让行动本身成为检验能力、暴露问题、积累经验的载体 —— 哪怕结果不完美，也能让人更清醒地认识自己，避免陷入 “自我欺骗” 的陷阱。</p><p>比如，假设你要考雅思。也许你的“大幻想”是“我要是认真学，雅思肯定能得高分，只是不想考。”那我们不如用“小行动”来代替：不纠结 “要不要考雅思”，而是花 1 小时做一套模拟真题（比如英语阅读），不查词典、不看答案，限时完成后对照解析打分。最后的效果是：可能会发现 “原来长难句根本读不懂”“选项陷阱完全没识别”，这会击碎 “我随便考考就能上” 的幻想，但也能明确 “需要从语法补起”“要练解题技巧” 等具体方向。后续若真决定考雅思，就能从实际短板出发备考；若放弃，也会明白 “不是不想考，而是确实需要付出大量努力”，避免用 “不屑考” 自我美化。</p><p>总之，我们应该让 “行动” 成为镜子，照见真实的自己 —— 无论是优点还是不足。空想的 “我能行” 像泡沫，一触即破；而小行动积累的 “我做到了” 像砖石，能真正搭建起自信的地基。哪怕小行动的结果不完美，至少让人远离 “眼高手低” 的陷阱，活得更清醒、更踏实。</p>]]></content>
      
      
      <categories>
          
          <category> 拾穗集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>选择没有绝对的答案，最后都是价值的衡量</title>
      <link href="/2025/09/19/22-%E9%80%89%E6%8B%A9%E6%B2%A1%E6%9C%89%E7%BB%9D%E5%AF%B9%E7%9A%84%E7%AD%94%E6%A1%88%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E6%98%AF%E4%BB%B7%E5%80%BC%E7%9A%84%E8%A1%A1%E9%87%8F/"/>
      <url>/2025/09/19/22-%E9%80%89%E6%8B%A9%E6%B2%A1%E6%9C%89%E7%BB%9D%E5%AF%B9%E7%9A%84%E7%AD%94%E6%A1%88%EF%BC%8C%E6%9C%80%E5%90%8E%E9%83%BD%E6%98%AF%E4%BB%B7%E5%80%BC%E7%9A%84%E8%A1%A1%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>女儿，你好：</p><p>今天是2025年6月14日，周六，外面下着雨。</p><p>今天上午你去上美术课，我接你回来的时候问了你一个问题：“假如给你一个亿或者是考上清华大学，你选择哪个？” 。你毫不犹豫地选择了一个亿，你说这种情况下当然是选一个亿了，考上清华也不一定能挣到一个亿，而且如果有一个亿可以做很多事，也可以继续考清华啊，但是如果只是选择上清华，再赚到一个亿就没那么容易了。我觉得你的选择是对的。</p><p>我之所以问你这个问题，是因为我看到了一个抖音上的短视频，在视频里一个老师问排成队的学生，清华和一个亿他们选择哪个？结果几乎所有学生都选择上清华。我觉得有可能是人们一直受到中国某种思想所谓的“万般皆下品，唯有读书高”。其实这种想法是错误的，都有的选择应该从价值的角度来衡量，简单说就是：这事值不值？</p><p>我给你说一个真实的故事。中国有一个著名的作家叫梁晓声。他成名后有一次一个人来找他，说有一个富豪想找他写个自传，他一打听是山西的一个煤老板，很可能就是靠着某种机会赚了大钱。梁晓声一想，自己好歹是一个知名作家，怎么可以给这种“暴发户”做“枪手”呢？于是拒绝了。可是有一天那人又找上门来，说愿意出很多钱。梁晓声觉得自己也不差钱，于是还是拒绝了。此时那个人做了一件事：他不断地从自己随身携带的皮箱中拿钱出来。起初是5万（注意这个故事是90年代，5万其实很多）。梁晓声继续拒绝并表现出藐视对方，但接下来的事情就有意思了。来人只要听到梁晓声拒绝，就再次加码。于是，当加到某个数字的时候，梁晓声沉默了，他有点想要接这个活儿。</p><p>上面作家梁晓声的这个故事是他有一次接受电视采访自己说的，我相信真实性还是挺高的。我们回过头来再看看开始那个选择清华还是一个亿的故事。如果这时候问题换成：“假如给你一百万或者是考上清华大学，你选择哪个？” 我想这时候应该毫不犹豫地选择考上清华，因为此时对比的事物发生变化，从一个亿变成了一百万。</p><p>所以，现在问题变得清晰了。大部分选择没有绝对的答案，最后都是价值的衡量。梁晓声开始不接受给人代笔，到后来接受（虽然他没明说），是因为对方给了很多钱，诱惑力足够大。选择一个亿而不是考上清华，是因为一个亿的价值更大；反之选择清华而不选择一百万的原因是此时考上清华的相对价值更大。</p><p>所以，我们在作出一些关键选择的时候，要理性地衡量不同选择的代价，最后选择那个相对而言回报最大的。</p><p>今天就啰唆到这里吧。</p><p>爱你的爸爸。</p><p>2025年6月14日 于宝盛里家中</p>]]></content>
      
      
      <categories>
          
          <category> 拾穗集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 选择 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拾穗集:写给我的乖乖刘一诺</title>
      <link href="/2025/09/19/21-%E6%8B%BE%E7%A9%97%E9%9B%86-%E5%86%99%E7%BB%99%E6%88%91%E7%9A%84%E4%B9%96%E4%B9%96%E5%88%98%E4%B8%80%E8%AF%BA/"/>
      <url>/2025/09/19/21-%E6%8B%BE%E7%A9%97%E9%9B%86-%E5%86%99%E7%BB%99%E6%88%91%E7%9A%84%E4%B9%96%E4%B9%96%E5%88%98%E4%B8%80%E8%AF%BA/</url>
      
        <content type="html"><![CDATA[<p>亲爱的女儿，你好：</p><p>今天是2025年6月11日。今天你跟我说要写一本小说，问我怎么样，我觉得挺好啊。说到写书，我也想给你写一本书。写什么呢？我觉得，应该是包括我们平常生活中的一些趣事、爸爸看过的一些觉得挺好的书，还有我偶尔觉得一些有用的人生感悟。</p><p>我总觉得，也许多年以后把它给你看，或者我自己翻看，会是一件很有趣的事情。</p>]]></content>
      
      
      <categories>
          
          <category> 拾穗集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 女儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成功是一种概率，我们提升自己是为了增加这种概率</title>
      <link href="/2025/09/19/20-%E6%88%90%E5%8A%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%A6%82%E7%8E%87%EF%BC%8C%E6%88%91%E4%BB%AC%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%A2%9E%E5%8A%A0%E8%BF%99%E7%A7%8D%E6%A6%82%E7%8E%87/"/>
      <url>/2025/09/19/20-%E6%88%90%E5%8A%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E6%A6%82%E7%8E%87%EF%BC%8C%E6%88%91%E4%BB%AC%E6%8F%90%E5%8D%87%E8%87%AA%E5%B7%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E5%A2%9E%E5%8A%A0%E8%BF%99%E7%A7%8D%E6%A6%82%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>亲爱的女儿，你好：</p><p>今天我想跟你说一下“努力”这回事。你可能经常听老师或者爸妈跟你说：“你要努力学习，将来就一定能考一个好成绩，上好的中学、高中、大学”等等。但是，是不是努力就一定能达到这样的目标呢？其实不一定。</p><p>按理说，为了鼓励你，爸爸应该跟你说，只要努力就一定能成功。但是，这个世界是复杂的，其实没有必然的“只要…就一定…”这样的事情。你一定看到过有的同学可能平时成绩很好，学习也很努力，但是某次考试的成绩就是不好。爸爸身边也有这样的例子，某个人平时工作很认真，但是就是没有得到升职加薪，或者某个人明明没抽烟喝酒但还是生了不好的病。</p><p>那是不是，其实我们不需要努力学习，也不需要锻炼身体，更不需要戒掉不好的习惯呢？其实不是。其实，如果我们把好的学习成绩、好的工作职位、好的身体等等当作是某种“成功”，那么这种成功其实是没有必然性的。比如，某个同学的考试成绩，可能是因为正好考了一个他没有复习的知识，也可能当时他看错了答案，把C选成了D；某个人没有得到升职加薪，可能是因为他做那个工作中，有一个人无意中做了一件错事，责任虽然不在他但是影响了他；也可能那个生病的人，本身身上就有某个得病的基因，让他得了那个病，又或者，某个人虽然抽烟喝酒，但是他碰巧没有病。</p><p>你发现了吗？我上面说的事情，其中有很多“碰巧”，这个在科学里有个与之对应的名词，叫做“概率”。其实成功也好，失败也罢，其实都是某种概率，就像我们扔硬币，可能是正面也可能是反面。当然，扔硬币这个事情的概率是50%，也就是每一面出现的概率都是50%，这种叫做“独立随机事件”，就是说每一次扔硬币的结果和上一次没有什么关系，每做一次这个事情产生的结果都是随机的。</p><p>但是，上面我给你举的那些例子以及我们工作、生活、学习等中的大部分事情不是这样的“独立随机事件”，而是可以根据我们对事情施加的影响而对结果的概率产生影响。比如学习这件事，如果我们平常努力一点，尽量多地把各种知识点都学明白了，那么遇到“复习盲区”的概率就会变小，那么考出好成绩的概率就会增加。又比如身体健康这件事，如果我们平时保持好的生活习惯，健康的饮食和规律的运动和休息，就会增加健康的概率。工作也是一样，如果我们在做事情的时候尽量充分地准备，并且预先对多种可能出现的风险进行预防，那么我们工作出错的概率就会变小，成功的概率也会增加。</p><p>所以，你看，其实成功或者失败都是一种概率。我们之所以应该“努力”，就是为了增加“成功”的概率，减少“失败”的概率，最终是否能成功也许就是靠一点点“运气”。<br>对了，你觉得“运气”这个词，其实是不是就是“概率”的意思呢？</p><p>爱你的爸爸</p><p>2025年6月17日 于北京家中。</p>]]></content>
      
      
      <categories>
          
          <category> 拾穗集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成功 </tag>
            
            <tag> 概率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品化要先解决项目管理的问题</title>
      <link href="/2025/09/16/19-%E4%BA%A7%E5%93%81%E5%8C%96%E8%A6%81%E5%85%88%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2025/09/16/19-%E4%BA%A7%E5%93%81%E5%8C%96%E8%A6%81%E5%85%88%E8%A7%A3%E5%86%B3%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近处理一个产品管理的事情，作为顾问我大概用三周时间大致梳理了一下现在的情况。原打算是做一个软件系统的产品化，但是经过梳理之后我发现问题可能比想象中要复杂的多。</p><p>先说一下现状吧。现在团队大部分的业务是基于一个多年的大客户的多个项目，人员大概有将近 100人，项目也很多。但是经常发现各个项目组都加班开发，人员严重不足，这造成了客户大量的投诉。我通过参与的一两个项目的需求评审发现几个问题：</p><p>需求来源于产品经理与对客户的调研，这种调研通常是几次谈话后的总结。<br>需求的评审是通过召开会议，产品经理按照事先画好的原型，跟研发人员讨论需求。<br>研发人员通常同时在多个项目上，最少有 2 个项目在身。<br>然后是研发人手不足，包括 UI、测试、实施等人手都不足。<br>最后需要产品经理跟部门的最高领导要人。<br>从上面的简单现状描述，其实反映了几个问题：</p><ol><li>缺少项目立项流程：一个项目是否要做，缺少立项流程。在立项时不仅仅是有人就可以做，还要有其他的资源安排。因此要高层决策，因为这涉及到跨部门和跨团队的资源协调。</li><li>缺少需求评审流程：现在的评审只有原型，没有用户角色划分、用例流程、需求文档，最后这些需求都在产品经理的脑子里，如果研发人员有不清楚的地方，要么向产品经理再次确认，要么就想当然的开发了。最后是否符合用户的需求完全靠运气。因此，需求内部评审完之后，要有一个客户的需求确认。</li><li>缺少项目过程监督：没有定期的项目过程汇报，需求评审会开了之后，就开始协调开发人员，然后就开干了，最后大家之盯着 deadline 交付，中间的过程没有人监督，只看结果不重视过程。又由于之前没有立项和需求确认流程，最后客户的投诉大概率是避免不了的。</li></ol><p>基于上面的情况，我认为要做以下的改进：</p><ol><li>成立产品项目管理委员会：由部门主管、产品总监、研发总监和项目经理参加。负责项目的立项审批，定期的项目过程监控。</li><li>明确项目管理制度：对于客户定制项目，每个项目都有明确的项目经理，采用项目经理负责制。这里还有两种方式，如果是强矩阵模式，那么由项目经理对人员进行考核；如果是弱矩阵模式，则由资源部门的经理对人员考核，资源部门与项目经理签订项目外包合同，定期向项目经理汇报。</li><li>明确项目分类，不同项目类型处理方式不同：要有产研项目、实施项目的区分。产研项目是公司的产品平台项目，有明确的产品基线，按照产品基线进行开发，由产品经理负责；实施项目是基于产品化平台进行客户定制，由项目经理负责。</li><li>任命产品总监和研发总监：产品总监负责管理产品团队，研发总监负责管理技术团队。后续的所有产研项目的人员安排由这两个人负责。</li><li>建立例会制度：PMO 有定期的例会，对所有的产研项目和实施项目的过程进行监控。单独的产研项目，成立专门的内部事业部，每周定期开会，反馈情况。要监控的内容包括但不限于：计划执行情况、项目风险情况、项目成本核算、客户回款情况等。</li></ol><p>产品化绝对不是一些文档和套路，一定是按照产品化的管理来做的，简单说，先改变管理方式，再根据管理方式的改变变更具体的动作。</p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 产品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记《如何写出一篇好文章》</title>
      <link href="/2025/09/12/18-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BD%E6%96%87%E7%AB%A0%E3%80%8B/"/>
      <url>/2025/09/12/18-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%8A%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E4%B8%80%E7%AF%87%E5%A5%BD%E6%96%87%E7%AB%A0%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250912114355573.png" alt="image.png"></p><p>这本书的作者是日本作家 – <strong>山口拓朗</strong>。 我大概花了3天时间读完。怎么说呢，这本书有一些日本写这类“快消品书”的通病，那就是：本身要讲的内容其实很好，因此会起一个很吸引研究的书名，然后把文章分成很多个章节，每个章节只讲一小点。由于真正要说的内容太少，因此书中会夹杂大量作者的举例。</p><p>这种书的写法到也不是完全不可取，对于喜欢step-by-step的读者，其实蛮友好的，但是如果经常阅读的人可能会觉得啰嗦。</p><p>既然读完一本书，不妨把一些有用的东西记下来。比如作者说的一些写作方法还是比较实用的。</p><p>作者强调了写作之前就要确定自己书的读者是谁。这一点很重要，虽然我们大多数人不写书，但是会经常写一些文章，最容易犯错的就是不知道自己写给谁看，或则说有的时候是读者的范围太宽泛了。我们写文章时一定要聚焦，回答自己一个问题：这篇文章（或这本书）到底是给谁看的？<br>然后就是写作的时候，把自己当做一个教师，想象读者就在面前，把自己想要说的话写出来。<br>当然本书的作者还提到了一些训练写作的技巧，比如：</p><ul><li>把平常自己观察到的事情记录下来，积累素材</li><li>给自己的写作规定一个最后截止日期，这样能逼着自己尽快写出东西来。</li><li>保持写作的习惯，比如每天写。</li><li>写作的文章要主题明确，一定要有鲜明的观点，然后找出多个论据来支撑自己的观点。</li><li>千万不要废话连篇，读者的耐心是有限的。</li><li>写作是尽量少用抽象的词，要具体化，要具体描写。这让我想起了高尔基的《在人间》，刻画人物细节非常棒。</li><li>然后是要有5W3H的原则来写作：<ul><li>When</li><li>What</li><li>Who</li><li>Where</li><li>Why</li><li>How</li><li>How many</li><li>How much</li></ul></li><li>“逻辑”与“情感”密不可分，所以，不能偏重于某一方，而要平衡两者的比重，才能写出打动人的文章来。</li><li>要学会讲故事，人们都爱挺故事，不爱听大道理。</li><li>说话要斩钉截铁，不要磨磨唧唧。</li><li>理解别人，这个世界上有不同的价值观，写的文章如果对谁都不利，那么何必写？</li></ul><p>这个基本上就是阅读这篇文章的一些感想，记录下来。</p>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 写作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么你想做的事情没做成？</title>
      <link href="/2025/09/11/17-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%83%B3%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%B2%A1%E5%81%9A%E6%88%90%EF%BC%9F/"/>
      <url>/2025/09/11/17-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%83%B3%E5%81%9A%E7%9A%84%E4%BA%8B%E6%83%85%E6%B2%A1%E5%81%9A%E6%88%90%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我一直思考一个问题：为什么很多人，包括我自己，有各种各样的想法，尤其想逃离现在朝九晚五的生活，但是最后一直朝九晚五到退休？然后我看到了这个知乎上的文章。这里节选两部分。第一部分是：为什么不应该上班；第二部分是：如何才能成事。</p></blockquote><h2 id="为什么不应该上班"><a href="#为什么不应该上班" class="headerlink" title="为什么不应该上班"></a>为什么不应该上班</h2><p>有人说，人就该上班。<br>操，凭什么说人就该上班？你是没办法才上班，你是走投无路了才上班的。<br>不管你是考公还是考编，还是去工厂里面打螺丝，你都是没办法，你才去的。你稍微有些办法，你会去上班吗，你这个鸡贼。<br>任何人上班都是因为穷，除非那些从政的，他们想做一番轰轰烈烈的事业。<br>工作其实也就两个岗位，第一个是当官的，第二个是经商的，其它的就不用想了，基本上没什么用，在社会中是非常没有存在感的一个群体。<br>所以说如果你正常的话，你就不会去考虑上班，上班都是没办法的事，一眼望到头的生活你愿意过吗，你肯定不愿意过。<br>如果你一辈子不上班的话，你也能够找到不上班的路子，也能发家致富的路子。<br>比如你不愿意去上班，人家说那你帮我去招工吧，你成立了一个劳务公司。<br>人家说你不愿意去上班，那你跟我一起搞拆迁吧。<br>总之就是你不上班，就有不上班的路子，你上班，就有上班的路子。<br>不上班的路子更广，因为这个群体人比较少，你稍微优秀一点，你就能够脱颖而出。你上班，面对的竞争对手都很牛，千军万马过独木桥，你要想鹤立鸡群，是非常难的事儿。<br>所以说你正常的话，你就不应该去上班。为啥你去上班了？你有车贷，你有房贷，你没有被动收入，不上班不行。<br>现在你没有车贷，没有房贷，你还会去上班吗？上个鸡脖，饿死都不上班。宁愿拾破烂都不去上班，宁愿当鸭子都不愿意去上班，甚至说宁愿当小姐都不愿意去上班。只要你不上班，你总能找到自己的出路。<br>上班永远只是权宜之计，一入侯门深似海，上班一年，掉到一个一米的坑里。上面两年，掉到一个两米的坑里。上班超过20年，直接掉进无底深渊。你说你想跳出来，可能吗？不可能的。所以说上班的时间越久，你就越不正常。别管读再多书，他都会变得非常胆小非常傻。<br>人，只有不上班了，他才会恢复元气。你刚开始不上班是不是有恐惧感？任何人刚开始都有这种恐惧感，当你克服了这种恐惧感，你才能够立起来。<br>记住一句话，不是走投无路，不是快要饿死了，就不要去上班。就算上班，也是白天跟老板干，晚上复制老板，为以后能自己单干做准备。而不是说我要跟老板学一辈子。</p><h2 id="如何才能成事"><a href="#如何才能成事" class="headerlink" title="如何才能成事"></a>如何才能成事</h2><blockquote><p>冯唐写过一本书《成事》，但是我觉得弯弯绕绕的还没有下面这段文字说的透彻。</p></blockquote><p><strong>很多人都想立起来，为什么最后没立起来？</strong><br>很简单，他没把心放在一个地方，只要咱把心放在一个地方，咱100%能立起来。<br>怎样才能把心放在一个地方？看身边的人超越了咱10倍100倍没有。<br>我们镇有个人，他邻居在上海卖保健品，每年能赚1000多万，每年回家都是开路虎来。他的邻居原本是在大学食堂打工，也不打工了，一转身去广州卖保健品了，6年多都没回家。如果他的邻居不成功，他会辞职吗？不会。<br>人只会被身边的人影响，外面的人成功了，我们没感觉，身边的人成功了，我们才有感觉。<br>父亲的同事退休了，天天做直播，卖字画，日收入2000 +，对父亲的刺激还是蛮大的。<br>父亲说，他的字画还没我好呢，买他字画的人懂个屁啊，父亲也买了直播架，开始做直播。<br>咱讲这个到底想说明个啥？你身边的人在某种程度上决定了你的命运。你身边有个人跟你住在一起，他每天都能赚10000，你能睡得着？你肯定睡不着。<br>一个人之所以进步，是他习惯性把地狱当天堂，把大灾难当做零食吃。育小之辈他喜欢逃避痛苦，不知道所有的智慧都是痛苦送给我们的。你拒绝了痛苦光临，也就拒绝了智慧敲门。<br>有个人，他的爸爸妈妈在时，每天只有300多的收入，他的爸爸妈妈不在了，没人给他兜底了，他每天的收入变成了3000多。赚钱的核心秘密是什么？没人帮兜底了，除了自己变得越来越厉害，别无选择。<br>为什么咱老立不起来，咱遇到困难了，老有别的路走。当一个人只有一条路时才能被封神。<br>有个和尚，他没钱，但去了很多地方，人家问他秘诀是啥？他说，有个要饭的碗，一直往人多的地方走。<br>要是这个和尚比较富有，或许他就走不远了。因为走时他想带着车啊，房啊，团队啊啥的往前走。<br>往前走，是一个不断舍的过程，不是一个做加法的过程，但你放眼看去，身边的人都在做加法。<br>人的能力在某种程度上也是被逼的，我从来不信什么顺其自然，把该做的事儿做了，剩下就看老天的安排这一类的话。<br>一个人竭尽全力都未必能成功，凭什么你随便玩玩你成功了？所有的成功都是被重大灾难蹂躏的结果。</p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知乎 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目管理中总时差与自由时差的解析</title>
      <link href="/2025/09/09/16-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%AD%E6%80%BB%E6%97%B6%E5%B7%AE%E4%B8%8E%E8%87%AA%E7%94%B1%E6%97%B6%E5%B7%AE%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/09/09/16-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%AD%E6%80%BB%E6%97%B6%E5%B7%AE%E4%B8%8E%E8%87%AA%E7%94%B1%E6%97%B6%E5%B7%AE%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在项目管理中，做资源计划是必有的功课，其中“总时差”和“自由时差”是两个关键的概念，它们用来判断任务的灵活度。下面通过一个例子来说明它们的概念和用法。</p><p>假设，我们用一个“产品发布会筹备项目”，我把它分成了A～F的6个字任务，它们的依赖关系如下：</p><table><thead><tr><th>任务</th><th>前置任务</th><th>持续时长（天）</th><th>说明</th></tr></thead><tbody><tr><td>A</td><td>无</td><td>2</td><td>确定发布会主题</td></tr><tr><td>B</td><td>A</td><td>3</td><td>制定流程方案</td></tr><tr><td>C</td><td>A</td><td>4</td><td>联系场地与供应商</td></tr><tr><td>D</td><td>B</td><td>5</td><td>设计宣传物料</td></tr><tr><td>E</td><td>C</td><td>2</td><td>确认场地与供应商合同</td></tr><tr><td>F</td><td>D、E</td><td>3</td><td>最终彩排与准备</td></tr></tbody></table><p>画成箭线图就是下面这个样子：</p><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250909092516215.png" alt="image.png"></p><p>我们知道，项目的关键路径是任务链条中时间最长的那个，在这里是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A→B→D→F（总时长 = 2+3+5+3=13 天，为项目最短工期）</span><br></pre></td></tr></table></figure><p>而非关键路径是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">非关键路径：A→C→E→F（总时长 = 2+4+2+3=11 天）</span><br></pre></td></tr></table></figure><p>项目中的总时差计算公式如下：</p><p>$$<br>总时差&#x3D;任务最晚开始时间 - 任务最早开始时间 &#x3D; 最晚完成时间 - 最早完成时间<br>$$</p><p>项目的自由时差计算公式如下：</p><p>$$<br>自由时差&#x3D;紧后任务的最早开始时间 - 本任务的最早完成时间 </p><p>$$</p><p>我们知道，关键路径上的任务的自由时差和总时差都是0，存在这两类时差的都是在非关键路径上，这里就是C和E这两个任务。</p><p>那么，根据上面的例子和计算公式，我们可以得到下面C、E两个任务的总时差和自由时差。</p><p>C最晚的完成时间是什么呢？就是E任务的最晚开始时间，也就是F任务的开始时间减去E任务本身的时间，结果是8。</p><p>$$<br>C的最晚开始时间&#x3D;F任务的开始时间-E任务本身的时间&#x3D; 10-2&#x3D;8<br>$$</p><p>C任务的最早完成时间是什么呢？就是A任务完成后，马上开始C，那么就是A任务时间（2），加上C任务的时长（4），结果是6</p><p>$$<br>C任务的最早开始时间&#x3D;A任务的时间 + C任务的时间 &#x3D; 2+4&#x3D;6<br>$$</p><p>因此，C任务的总时差：</p><p>$$<br> C任务的总时差&#x3D;C任务最晚开始时间 - C任务最早开始时间 &#x3D; 8-6&#x3D;2<br>$$</p><p>一个任务有总时差代表这个任务可以推迟执行的时间或者任务本身可以延长的时间，在这里：C 可推迟 2 天开始（从第 2 天推迟到第 4 天开始），<strong>不会影响项目总工期 13 天</strong>。  但是，这里C本身的工期如果延长2天，那么就会导致关键路径变化（有两条了）。原因是“自由时差”的限制。</p><p>因为C的自由时差是：</p><p>$$<br>C的自由时差&#x3D;C的紧后任务的最早开始时间 - C的最早完成时间&#x3D; E的最早开始时间- C的最早完成时间&#x3D;6-6&#x3D;0<br>$$</p><p>如果自由时差为0，那么C就不能延长自己的最晚完成时间。</p><p>最后，总结一下。C任务的总时差是 2 天。这意味着 C 最多只能延误 2 天，超过则会打破 “项目总工期 13 天” 的限制，关键路径发生变化了，说明项目会整体延期。C的自由时差为0，意味着 C 任务哪怕只延误 1 天，都会直接导致紧后任务 E 无法按原计划，就是说 E 也会推迟开始。</p><p>所以，作为项目经理，我们要记住2点：</p><ol><li>如果一个任务上有总时差，意味着我们在这个任务上有一些冗余的时间可以调配。这个总时差的消耗不会影响项目工期</li><li>如果一个任务上有自由时差，意味着个这个任务的可以推迟的时间，就是说，只要推迟的时间在自由时差之内就不会影响后面任务的执行。如果自由时差为0，说明这个任务如果推迟了，就会有连锁反应，造成后面的任务也推迟。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
            <tag> 总时差 </tag>
            
            <tag> 自由时差 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库关系代数中的有损分解与无损分解：概念、区别及示例</title>
      <link href="/2025/09/05/15-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E6%9C%89%E6%8D%9F%E5%88%86%E8%A7%A3%E4%B8%8E%E6%97%A0%E6%8D%9F%E5%88%86%E8%A7%A3%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%A4%BA%E4%BE%8B/"/>
      <url>/2025/09/05/15-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0%E4%B8%AD%E7%9A%84%E6%9C%89%E6%8D%9F%E5%88%86%E8%A7%A3%E4%B8%8E%E6%97%A0%E6%8D%9F%E5%88%86%E8%A7%A3%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E5%8C%BA%E5%88%AB%E5%8F%8A%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>在数据库设计中，当我们对一个关系模式进行分解时，有损分解和无损分解是两个重要的概念，它们对于保持数据的完整性和一致性起着关键作用。</p><h2 id="有损分解"><a href="#有损分解" class="headerlink" title="有损分解"></a>有损分解</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>有损分解指的是在将一个关系模式 (R) 分解为多个关系模式 (R1, R2, \cdots, Rn) 的过程中，通过对这些分解后的关系进行自然连接（这是关系代数中一种常用的连接操作，它基于两个关系中相同属性名的属性值相等进行连接），无法还原出原始关系 (R) 的所有信息。也就是说，分解后会丢失部分数据信息，这种分解会损害数据的完整性。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>假设有一个关系模式 <code>StudentCourse</code>，包含属性 <code>学号(SID)</code>、<code>学生姓名(SName)</code>、<code>课程号(CID)</code> 和 <code>课程名称(CName)</code>，即 <code>StudentCourse(SID, SName, CID, CName)</code>。假设存在数据如下：</p><table><thead><tr><th>SID</th><th>SName</th><th>CID</th><th>CName</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>C001</td><td>数学</td></tr><tr><td>1</td><td>张三</td><td>C002</td><td>语文</td></tr><tr><td>2</td><td>李四</td><td>C001</td><td>数学</td></tr></tbody></table><p>现在将其分解为两个关系模式：</p><ul><li><code>Student(SID, SName)</code></li><li><code>Course(CID, CName)</code></li></ul><p>分解后的 <code>Student</code> 关系：</p><table><thead><tr><th>SID</th><th>SName</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><p>分解后的 <code>Course</code> 关系：</p><table><thead><tr><th>CID</th><th>CName</th></tr></thead><tbody><tr><td>C001</td><td>数学</td></tr><tr><td>C002</td><td>语文</td></tr></tbody></table><p>当我们对 <code>Student</code> 和 <code>Course</code> 进行自然连接时，会得到：</p><table><thead><tr><th>SID</th><th>SName</th><th>CID</th><th>CName</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>C001</td><td>数学</td></tr><tr><td>1</td><td>张三</td><td>C002</td><td>语文</td></tr><tr><td>2</td><td>李四</td><td>C001</td><td>数学</td></tr><tr><td>2</td><td>李四</td><td>C002</td><td>语文</td></tr></tbody></table><p>可以看到，新得到的关系中多了“2 | 李四 | C002 | 语文”这条在原始关系中不存在的数据，并且无法准确还原出原始关系中每个学生具体选修了哪些课程，这就是有损分解，丢失了学生与课程之间准确的对应信息。</p><h2 id="无损分解"><a href="#无损分解" class="headerlink" title="无损分解"></a>无损分解</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>无损分解是指将一个关系模式 (R) 分解为多个关系模式 (R1, R2, \cdots, Rn) 后，通过对这些分解后的关系进行自然连接，能够精确地还原出原始关系 (R)，不会丢失任何信息。这种分解保证了数据的完整性，是数据库设计中较为理想的分解方式。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>还是以刚才的 <code>StudentCourse(SID, SName, CID, CName)</code> 关系模式为例，这次进行无损分解。</p><p>将其分解为以下三个关系模式：</p><ul><li><code>Student(SID, SName)</code></li><li><code>Course(CID, CName)</code></li><li><code>Enrollment(SID, CID)</code></li></ul><p>分解后的 <code>Student</code> 关系：</p><table><thead><tr><th>SID</th><th>SName</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr></tbody></table><p>分解后的 <code>Course</code> 关系：</p><table><thead><tr><th>CID</th><th>CName</th></tr></thead><tbody><tr><td>C001</td><td>数学</td></tr><tr><td>C002</td><td>语文</td></tr></tbody></table><p>分解后的 <code>Enrollment</code> 关系：</p><table><thead><tr><th>SID</th><th>CID</th></tr></thead><tbody><tr><td>1</td><td>C001</td></tr><tr><td>1</td><td>C002</td></tr><tr><td>2</td><td>C001</td></tr></tbody></table><p>当对这三个关系进行自然连接时：</p><ul><li>首先 <code>Student</code> 和 <code>Enrollment</code> 进行自然连接，基于 <code>SID</code> 属性连接得到中间结果：</li></ul><table><thead><tr><th>SID</th><th>SName</th><th>CID</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>C001</td></tr><tr><td>1</td><td>张三</td><td>C002</td></tr><tr><td>2</td><td>李四</td><td>C001</td></tr></tbody></table><ul><li>然后这个中间结果再与 <code>Course</code> 进行自然连接，基于 <code>CID</code> 属性连接，最终得到：</li></ul><table><thead><tr><th>SID</th><th>SName</th><th>CID</th><th>CName</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>C001</td><td>数学</td></tr><tr><td>1</td><td>张三</td><td>C002</td><td>语文</td></tr><tr><td>2</td><td>李四</td><td>C001</td><td>数学</td></tr></tbody></table><p>可以看到，通过自然连接精确还原了原始的 <code>StudentCourse</code> 关系，没有丢失任何信息，这就是无损分解。</p><h2 id="区别总结"><a href="#区别总结" class="headerlink" title="区别总结"></a>区别总结</h2><ul><li><strong>数据还原</strong>：有损分解无法通过自然连接还原原始关系的所有信息，而无损分解能够精确还原。</li><li><strong>数据完整性</strong>：有损分解会破坏数据的完整性，导致信息丢失；无损分解则能保证数据完整性不受损害。</li><li><strong>设计影响</strong>：在数据库设计中，无损分解通常是我们追求的目标，因为它能确保在对关系模式进行分解以优化数据库结构时，数据的准确性和一致性不受影响。而有损分解一般应尽量避免，因为它可能会给数据处理和应用带来错误和不便。</li></ul><p>理解有损分解和无损分解的概念及区别，对于数据库设计师在进行关系模式分解时做出正确决策至关重要，有助于设计出高效且数据准确的数据库系统。 </p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂数据库设计范式：1NF、2NF、3NF 和 BCNF</title>
      <link href="/2025/09/05/14-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%EF%BC%9A1NF%E3%80%812NF%E3%80%813NF-%E5%92%8C-BCNF/"/>
      <url>/2025/09/05/14-%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%8C%83%E5%BC%8F%EF%BC%9A1NF%E3%80%812NF%E3%80%813NF-%E5%92%8C-BCNF/</url>
      
        <content type="html"><![CDATA[<p>在数据库设计的领域中，设计范式是构建高效、规范数据库的关键准则。遵循这些范式，能有效避免数据冗余、插入异常、删除异常等问题，提升数据库的性能与数据完整性。今天，咱们就来深入探讨 1NF、2NF、3NF 和 BCNF 这几种常见的数据库设计范式，并通过具体例子加深理解。</p><h2 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>第一范式要求数据库表的每一列都是不可分割的原子值，即表中的每个单元格都只能包含单一的数据项，不能有重复组或嵌套结构。简单来说，就是确保每列都是最基本的数据单元。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设我们要设计一个学生信息表，初始设计可能如下：</p><table><thead><tr><th>学号</th><th>姓名</th><th>课程（重复组）</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>[数学, 语文]</td></tr><tr><td>1002</td><td>李四</td><td>[英语, 物理]</td></tr></tbody></table><p>这个设计不符合 1NF，因为“课程”列包含了重复组。按照 1NF 的要求，应将其拆分为：</p><table><thead><tr><th>学号</th><th>姓名</th><th>课程</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>数学</td></tr><tr><td>1001</td><td>张三</td><td>语文</td></tr><tr><td>1002</td><td>李四</td><td>英语</td></tr><tr><td>1002</td><td>李四</td><td>物理</td></tr></tbody></table><p>这样，每个单元格都只包含单一数据项，满足了 1NF。</p><h2 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>在满足 1NF 的基础上，2NF 要求表中的每一个非主属性完全依赖于主键，而不能部分依赖于主键。也就是说，如果一个表有复合主键（由多个字段组成的主键），那么非主属性不能只依赖于主键中的一部分字段。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>以学生选课系统为例，假设有一个表结构如下：</p><table><thead><tr><th>学号</th><th>课程号</th><th>学生姓名</th><th>课程名称</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>C001</td><td>张三</td><td>数学</td><td>90</td></tr><tr><td>1002</td><td>C002</td><td>李四</td><td>英语</td><td>85</td></tr></tbody></table><p>这里主键是（学号，课程号）。“学生姓名”只依赖于“学号”，“课程名称”只依赖于“课程号”，存在部分依赖，不满足 2NF。</p><p>拆分后的设计为：</p><p><strong>学生表（Student）</strong>：</p><table><thead><tr><th>学号</th><th>学生姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td></tr><tr><td>1002</td><td>李四</td></tr></tbody></table><p><strong>课程表（Course）</strong>：</p><table><thead><tr><th>课程号</th><th>课程名称</th></tr></thead><tbody><tr><td>C001</td><td>数学</td></tr><tr><td>C002</td><td>英语</td></tr></tbody></table><p><strong>选课表（Enrollment）</strong>：</p><table><thead><tr><th>学号</th><th>课程号</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>C001</td><td>90</td></tr><tr><td>1002</td><td>C002</td><td>85</td></tr></tbody></table><p>这样，每个表中的非主属性都完全依赖于主键，满足了 2NF。</p><h2 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>在满足 2NF 的基础上，3NF 要求表中的每一个非主属性既不部分依赖于主键，也不传递依赖于主键。传递依赖指的是如果存在 (A \rightarrow B) 和 (B \rightarrow C)，那么 (C) 传递依赖于 (A)。</p><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>还是以学生选课系统为例，假设在“学生表（Student）”中增加“系别”和“系主任”字段，表结构如下：</p><table><thead><tr><th>学号</th><th>学生姓名</th><th>系别</th><th>系主任</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>计算机系</td><td>王老师</td></tr><tr><td>1002</td><td>李四</td><td>数学系</td><td>李老师</td></tr></tbody></table><p>这里“系主任”通过“系别”间接依赖于“学号”，存在传递依赖，不满足 3NF。</p><p>拆分后的设计为：</p><p><strong>学生表（Student）</strong>：</p><table><thead><tr><th>学号</th><th>学生姓名</th><th>系别</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>计算机系</td></tr><tr><td>1002</td><td>李四</td><td>数学系</td></tr></tbody></table><p><strong>系表（Department）</strong>：</p><table><thead><tr><th>系别</th><th>系主任</th></tr></thead><tbody><tr><td>计算机系</td><td>王老师</td></tr><tr><td>数学系</td><td>李老师</td></tr></tbody></table><p>此时，消除了传递依赖，满足 3NF。</p><h2 id="巴斯-科德范式（BCNF）"><a href="#巴斯-科德范式（BCNF）" class="headerlink" title="巴斯 - 科德范式（BCNF）"></a>巴斯 - 科德范式（BCNF）</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>BCNF 是 3NF 的增强版本，它要求每一个非平凡的函数依赖 (X \rightarrow Y)（(Y) 不属于 (X)），(X) 都必须是一个候选键。也就是说，不仅非主属性要依赖于候选键，主属性也要完全依赖于候选键。</p><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>假设有一个图书借阅表，表结构如下：</p><table><thead><tr><th>借阅编号</th><th>图书编号</th><th>读者编号</th><th>借阅日期</th><th>还书日期</th><th>图书作者</th></tr></thead><tbody><tr><td>001</td><td>B001</td><td>R001</td><td>2023 - 01 - 01</td><td>2023 - 01 - 10</td><td>作者 A</td></tr><tr><td>002</td><td>B002</td><td>R002</td><td>2023 - 02 - 01</td><td>2023 - 02 - 15</td><td>作者 B</td></tr></tbody></table><p>这里候选键是（借阅编号），但存在函数依赖“图书编号 → 图书作者”，而“图书编号”不是候选键，不满足 BCNF。</p><p>拆分后的设计为：</p><p><strong>借阅表（Borrow）</strong>：</p><table><thead><tr><th>借阅编号</th><th>图书编号</th><th>读者编号</th><th>借阅日期</th><th>还书日期</th></tr></thead><tbody><tr><td>001</td><td>B001</td><td>R001</td><td>2023 - 01 - 01</td><td>2023 - 01 - 10</td></tr><tr><td>002</td><td>B002</td><td>R002</td><td>2023 - 02 - 01</td><td>2023 - 02 - 15</td></tr></tbody></table><p><strong>图书表（Book）</strong>：</p><table><thead><tr><th>图书编号</th><th>图书作者</th></tr></thead><tbody><tr><td>B001</td><td>作者 A</td></tr><tr><td>B002</td><td>作者 B</td></tr></tbody></table><p>此时，每个非平凡函数依赖的左边都是候选键，满足 BCNF。</p><p>在实际的数据库设计中，理解并遵循这些范式能让我们设计出更优化、更稳定的数据库结构，有效减少数据冗余和异常情况的发生，提升数据库的整体性能和数据管理效率。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库中的 Armstrong 定律：理解数据依赖的基石</title>
      <link href="/2025/09/05/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84-Armstrong-%E5%AE%9A%E5%BE%8B%EF%BC%9A%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96%E7%9A%84%E5%9F%BA%E7%9F%B3/"/>
      <url>/2025/09/05/13-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84-Armstrong-%E5%AE%9A%E5%BE%8B%EF%BC%9A%E7%90%86%E8%A7%A3%E6%95%B0%E6%8D%AE%E4%BE%9D%E8%B5%96%E7%9A%84%E5%9F%BA%E7%9F%B3/</url>
      
        <content type="html"><![CDATA[<p>在数据库设计领域，Armstrong定律是一组用于推理和分析关系数据库中数据依赖（尤其是函数依赖）的重要规则。它由W. W. Armstrong于1974年提出，为关系数据库理论提供了坚实的逻辑基础，帮助数据库设计师确保数据库模式的正确性和高效性。</p><h2 id="1-函数依赖基础概念"><a href="#1-函数依赖基础概念" class="headerlink" title="1. 函数依赖基础概念"></a>1. 函数依赖基础概念</h2><p>在介绍Armstrong定律之前，需要先理解函数依赖的概念。假设有关系模式 (R(U))，其中 (U) 是属性集， (X) 和 (Y) 是 (U) 的子集。如果对于 (R) 的任意两个元组 (t1) 和 (t2)，只要 (t1[X] &#x3D; t2[X])，就有 (t1[Y] &#x3D; t2[Y])，那么称 (Y) 函数依赖于 (X)，记作 (X→Y)。例如，在学生信息表（包含学号、姓名、年龄等属性）中，学号唯一确定了学生的姓名和年龄，即“学号→姓名”，“学号→年龄”。</p><h2 id="2-Armstrong定律内容"><a href="#2-Armstrong定律内容" class="headerlink" title="2. Armstrong定律内容"></a>2. Armstrong定律内容</h2><h3 id="自反律（Reflexivity）"><a href="#自反律（Reflexivity）" class="headerlink" title="自反律（Reflexivity）"></a>自反律（Reflexivity）</h3><ul><li><strong>描述</strong>：若 $(Y \subseteq X \subseteq U)$ ，则 (X → Y) 成立。这意味着一组属性总是能够函数决定它的任何子集。</li><li><strong>示例</strong>：在关系模式 $(R(A, B, C))$ 中，如果有属性集 $(X &#x3D; {A, B})，(Y &#x3D; {A})$，因为 $(Y$) 是 $(X$) 的子集，所以根据自反律，$(${A, B} → ${A}$) 是必然成立的。直观理解就是，当知道 (A) 和 (B) 的值时，必然也就知道 (A) 的值。</li></ul><h3 id="增广律（Augmentation）"><a href="#增广律（Augmentation）" class="headerlink" title="增广律（Augmentation）"></a>增广律（Augmentation）</h3><ul><li><strong>描述</strong>：若 (X → Y) 成立，且 $(Z \subseteq U)$，那么 $((X \cup Z) → (Y \cup Z))$ 也成立。即在函数依赖的两边同时增加相同的属性，函数依赖依然成立。</li><li><strong>示例</strong>：已知在学生选课关系模式 $(R(学号, 课程号, 成绩))$ 中，“学号 → 姓名”成立（假设姓名与学号存在一对一的函数依赖关系），若增加属性“所在班级”（记为 $(Z)$），那么“(学号, 所在班级) → (姓名, 所在班级)”也成立。这是因为学号能唯一确定姓名，当加上所在班级属性后，学号与所在班级共同依然能唯一确定姓名与所在班级。</li></ul><h3 id="传递律（Transitivity）"><a href="#传递律（Transitivity）" class="headerlink" title="传递律（Transitivity）"></a>传递律（Transitivity）</h3><ul><li><strong>描述</strong>：若 (X → Y) 和 (Y → Z) 都成立，那么 (X → Z) 也成立。它体现了函数依赖之间的传递关系。</li><li><strong>示例</strong>：在一个学校的数据库关系模式中，假设存在函数依赖“学号 → 所在系”和“所在系 → 系主任”，那么根据传递律，可以得出“学号 → 系主任”。即通过学号可以确定学生所在系，而所在系又确定了系主任，所以学号可以间接确定系主任。</li></ul><h2 id="3-由Armstrong定律导出的推论"><a href="#3-由Armstrong定律导出的推论" class="headerlink" title="3. 由Armstrong定律导出的推论"></a>3. 由Armstrong定律导出的推论</h2><h3 id="合并律（Union-Rule）"><a href="#合并律（Union-Rule）" class="headerlink" title="合并律（Union Rule）"></a>合并律（Union Rule）</h3><ul><li><strong>描述</strong>：若 (X → Y) 且 (X → Z)，则 (X → (Y \cup Z))。</li><li><strong>示例</strong>：在员工信息表关系模式 (R(员工编号, 姓名, 年龄, 部门)) 中，如果“员工编号 → 姓名”且“员工编号 → 年龄”，那么根据合并律可得“员工编号 → (姓名, 年龄)”，即员工编号可以同时确定姓名和年龄。</li></ul><h3 id="分解律（Decomposition-Rule）"><a href="#分解律（Decomposition-Rule）" class="headerlink" title="分解律（Decomposition Rule）"></a>分解律（Decomposition Rule）</h3><ul><li><strong>描述</strong>：若 $(X → (Y \cup Z))$，那么 $(X → Y)$ 且 $(X → Z)$。它是合并律的逆过程。</li><li><strong>示例</strong>：若在关系模式中有“订单编号 → (商品名称, 商品价格)”，根据分解律，可得到“订单编号 → 商品名称”以及“订单编号 → 商品价格”，即订单编号既能确定商品名称，也能确定商品价格。</li></ul><h3 id="伪传递律（Pseudo-Transitivity-Rule）"><a href="#伪传递律（Pseudo-Transitivity-Rule）" class="headerlink" title="伪传递律（Pseudo - Transitivity Rule）"></a>伪传递律（Pseudo - Transitivity Rule）</h3><ul><li><strong>描述</strong>：若 (X → Y) 且 $((Y \cup W) → Z)$，那么 $((X \cup W) → Z)$。</li><li><strong>示例</strong>：在一个涉及学生、课程和教师的关系模式中，已知“学生编号 → 所在班级”且“(所在班级, 课程名称) → 授课教师”，根据伪传递律可得“(学生编号, 课程名称) → 授课教师”。这是因为学生编号确定所在班级，而所在班级与课程名称共同确定授课教师，所以学生编号与课程名称共同能确定授课教师。</li></ul><h2 id="4-Armstrong定律的作用"><a href="#4-Armstrong定律的作用" class="headerlink" title="4. Armstrong定律的作用"></a>4. Armstrong定律的作用</h2><ul><li><strong>模式规范化</strong>：在数据库设计过程中，通过应用Armstrong定律及其推论，可以对关系模式进行规范化处理，消除数据冗余和异常，提高数据库的性能和数据完整性。例如，通过分解律和合并律，可以将复杂的关系模式分解为更简单、规范化的形式，同时保证函数依赖的正确性。</li><li><strong>依赖关系推导</strong>：帮助数据库设计师从已知的函数依赖推导出其他隐含的函数依赖，全面理解数据之间的内在联系。这对于发现数据库模式中潜在的问题以及优化数据库设计非常重要。例如，通过传递律可以发现一些间接的函数依赖关系，避免在设计中遗漏重要的约束。</li></ul><p>Armstrong定律是数据库理论中不可或缺的一部分，它为处理函数依赖提供了一套严谨的逻辑规则，无论是在数据库设计的初期分析，还是在后期的优化和维护阶段，都发挥着关键作用。理解和掌握Armstrong定律，对于设计出高效、稳定且符合业务需求的数据库系统至关重要。 </p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解模块内聚类型：概念、实例与 UML 图示</title>
      <link href="/2025/09/04/06-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9D%97%E5%86%85%E8%81%9A%E7%B1%BB%E5%9E%8B%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E5%AE%9E%E4%BE%8B%E4%B8%8E-UML-%E5%9B%BE%E7%A4%BA/"/>
      <url>/2025/09/04/06-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9D%97%E5%86%85%E8%81%9A%E7%B1%BB%E5%9E%8B%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E5%AE%9E%E4%BE%8B%E4%B8%8E-UML-%E5%9B%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>在软件开发过程中，模块的内聚类型对于系统的设计和维护至关重要。它决定了模块内部元素的紧密程度和功能相关性。以下将详细介绍各种内聚类型，并通过实例和 UML 图示来帮助理解。</p><h2 id="一、功能内聚"><a href="#一、功能内聚" class="headerlink" title="一、功能内聚"></a>一、功能内聚</h2><blockquote><p>功能内聚是指模块完成一个单一功能，各个部分协同工作，缺一不可。这意味着<strong>模块内部的所有元素都紧密围绕着实现一个具体且独立的功能</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901160849072.png" alt="image.png"></p><p>例如，在一个计算器软件中，加法运算模块就是功能内聚的。这个模块只负责将输入的两个数字相加并返回结果。模块内部的算法、数据处理等元素都只为了实现加法运算这一功能。</p><h2 id="二、顺序内聚"><a href="#二、顺序内聚" class="headerlink" title="二、顺序内聚"></a>二、顺序内聚</h2><blockquote><p>顺序内聚是指模块中的处理元素相关，而且必须顺序执行。也就是说，<strong>模块内部的操作有明确的先后顺序，前一个操作的结果是后一个操作的输入</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901160956326.png" alt="image.png"></p><p>以在线购物系统中的订单处理模块为例。订单处理流程包括接收订单、验证订单信息、扣减库存、生成支付链接等步骤。这些步骤必须按顺序执行，属于顺序内聚。</p><h2 id="三、通信内聚"><a href="#三、通信内聚" class="headerlink" title="三、通信内聚"></a>三、通信内聚</h2><blockquote><p>通信内聚是指<strong>所有处理元素集中在一个数据结构的区域上。模块内的操作主要是对特定的数据结构进行处理</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901161051591.png" alt="image.png"></p><p>在一个学生管理系统中，成绩统计模块就是通信内聚的。该模块主要对学生成绩的数据结构进行操作，例如计算平均分、最高分、最低分等操作都围绕学生成绩数据展开。</p><h2 id="四、过程内聚"><a href="#四、过程内聚" class="headerlink" title="四、过程内聚"></a>四、过程内聚</h2><blockquote><p>过程内聚是指<strong>处理元素相关，而且必须按特定的次序执行</strong>。<strong>与顺序内聚类似，但更强调处理过程的整体性</strong>。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901161247440.png" alt="image.png"></p><p>比如在一个文件处理系统中，文件上传模块就是过程内聚的。它包括选择文件、压缩文件、加密文件、上传文件等步骤，这些步骤有特定的次序且紧密相关。</p><h2 id="五、瞬时内聚（时间内聚）"><a href="#五、瞬时内聚（时间内聚）" class="headerlink" title="五、瞬时内聚（时间内聚）"></a>五、瞬时内聚（时间内聚）</h2><blockquote><p>瞬时内聚是指<strong>所包含的任务必须在同一时间间隔内执行。模块内的操作在时间上具有紧密的关联性。</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901161353817.png" alt="image.png"></p><p>在一个定时备份系统中，每天凌晨 2 点进行数据备份操作的模块就是瞬时内聚的。在凌晨 2 点这个特定时间点，系统会同时执行数据读取、压缩、存储等操作来完成备份。</p><h2 id="六、逻辑内聚"><a href="#六、逻辑内聚" class="headerlink" title="六、逻辑内聚"></a>六、逻辑内聚</h2><blockquote><p>逻辑内聚是指<strong>完成逻辑上相关的一组任务</strong>。模块内的操作在逻辑上是相关的，但可能涉及不同的数据和操作类型。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901161456695.png" alt="image.png"></p><p>在一个数据分析系统中，数据筛选模块就是逻辑内聚的。它可能包括筛选出销售额大于一定数值的数据、筛选出特定地区的数据等操作，这些操作在逻辑上都属于数据筛选范畴。</p><h2 id="七、偶然内聚（巧合内聚）"><a href="#七、偶然内聚（巧合内聚）" class="headerlink" title="七、偶然内聚（巧合内聚）"></a>七、偶然内聚（巧合内聚）</h2><blockquote><p>偶然内聚是指<strong>完成一组没有关系或松散关系的任务</strong>。这种内聚类型的模块内部元素关联性最弱。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901161545074.png" alt="image.png"></p><p>假设在一个软件中有一个杂项工具模块，它包含了计算圆面积、转换文件格式、生成随机数等操作，这些操作之间没有紧密的联系，属于偶然内聚。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解模块耦合类型：从概念到实例</title>
      <link href="/2025/09/04/05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9D%97%E8%80%A6%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%9A%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E5%AE%9E%E4%BE%8B/"/>
      <url>/2025/09/04/05-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%A8%A1%E5%9D%97%E8%80%A6%E5%90%88%E7%B1%BB%E5%9E%8B%EF%BC%9A%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>在软件开发过程中，模块耦合类型是一个至关重要的概念，它直接影响着软件系统的可维护性、可扩展性和可靠性。作为一个系统分析师或者架构设计师，需要深刻理解相关的概念，才能设计好系统，以下将详细介绍各种模块耦合类型及其具体示例。</p><h2 id="一、非直接耦合"><a href="#一、非直接耦合" class="headerlink" title="一、非直接耦合"></a>一、非直接耦合</h2><blockquote><p>非直接耦合是指两个模块之间没有直接关系，它们之间的联系完全是<strong>通过主模块的控制和调用</strong>来实现的。这种耦合方式使得模块之间相对独立，一个模块的变动对其他模块的影响较小。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901153801526.png" alt="image.png"></p><p>假设我们有一个电商系统，其中有一个用户模块和一个订单模块。用户模块负责用户的注册、登录和信息管理等功能，订单模块负责处理用户订单的生成、支付和发货等操作。<br>这两个模块并没有直接的交互，它们都通过主控制模块（比如系统的核心业务逻辑处理模块）来进行间接的联系。<br>例如，当用户在前端界面进行下单操作时，前端会将请求发送给主控制模块，主控制模块先调用用户模块验证用户身份，然后再调用订单模块来生成订单。用户模块和订单模块本身并不直接交互，这种设计就是非直接耦合。</p><h2 id="二、数据耦合"><a href="#二、数据耦合" class="headerlink" title="二、数据耦合"></a>二、数据耦合</h2><blockquote><p>数据耦合是指一组模块<strong>借助参数表传递简单数据</strong>。这种耦合方式在模块之间传递的数据较为简单，<strong>通常是基本的数据类型，如整数、字符串等</strong>。</p></blockquote><p> <img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901154005828.png" alt="image.png"></p><p>还是以电商系统为例，在订单模块中有一个计算订单总价的子模块和一个显示订单详情的子模块。<br>计算订单总价的子模块会根据商品价格、数量等信息计算出总价，然后将总价这个简单数据作为参数传递给显示订单详情的子模块，这样显示订单详情的子模块就可以将总价展示给用户。这里就是通过参数传递简单数据，属于数据耦合。</p><h2 id="三、标记耦合"><a href="#三、标记耦合" class="headerlink" title="三、标记耦合"></a>三、标记耦合</h2><blockquote><p>标记耦合是指一组模块<strong>通过参数表传递记录信息（数据结构）</strong>。与数据耦合不同的是，<strong>这里传递的数据是有一定结构的数据</strong>。</p></blockquote><p>  <img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901154148175.png" alt="image.png"></p><p>在一个企业资源管理（ERP）系统中，有员工管理模块和工资计算模块。<br>员工管理模块会维护员工的基本信息，这些信息以员工信息结构体（包含员工编号、姓名、入职时间等）的形式存在。<br>当工资计算模块需要计算员工工资时，员工管理模块会将员工信息结构体作为参数传递给工资计算模块。这种通过传递数据结构来实现模块间联系的方式就是标记耦合。</p><h2 id="四、控制耦合"><a href="#四、控制耦合" class="headerlink" title="四、控制耦合"></a>四、控制耦合</h2><blockquote><p>控制耦合是指模块之间<strong>传递的信息中包含用于控制模块内部逻辑的信息</strong>。也就是说，一个模块通过传递控制信息来影响另一个模块的执行逻辑。<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901154352956.png" alt="image.png"></p></blockquote><p>比如：在一个自动化生产线上的控制系统中，有一个生产调度模块和一个设备控制模块。<br>生产调度模块根据生产计划决定当前需要生产哪种产品，然后将生产指令（如产品类型、生产数量等控制信息）传递给设备控制模块。<br>设备控制模块根据接收到的生产指令来控制生产设备的运行，比如选择不同的生产模具、调整生产速度等。这里生产调度模块传递给设备控制模块的生产指令就是控制信息，这种模块间的耦合就是控制耦合。</p><h2 id="五、外部耦合"><a href="#五、外部耦合" class="headerlink" title="五、外部耦合"></a>五、外部耦合</h2><blockquote><p>外部耦合是指<strong>一组模块都访问同一全局简单变量而不是同一全局数据结构</strong>，而且不是通过参数表传递该全局变量的信息。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901154559915.png" alt="image.png"></p><p>比如：考虑一个简单的多线程应用程序，有多个线程模块在运行。<br>这些线程模块都需要访问一个全局的计数器变量，用于记录系统中某个事件发生的次数。每个线程模块在执行过程中都会读取和更新这个全局计数器变量，但并没有通过参数传递这个变量，这种情况就是外部耦合。</p><h2 id="六、公共耦合"><a href="#六、公共耦合" class="headerlink" title="六、公共耦合"></a>六、公共耦合</h2><blockquote><p>公共耦合是指多个模块都访问同一个公共数据环境，公共的数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901154820574.png" alt="image.png"></p><p>比如：在一个网络聊天系统中，有多个客户端模块和一个服务器模块。所有客户端模块和服务器模块都需要访问一个公共的消息队列。客户端模块将用户发送的消息放入消息队列，服务器模块从消息队列中取出消息并进行转发。这里的消息队列就是公共数据环境，客户端模块和服务器模块之间的这种耦合就是公共耦合。</p><h2 id="七、内容耦合"><a href="#七、内容耦合" class="headerlink" title="七、内容耦合"></a>七、内容耦合</h2><blockquote><p>内容耦合是耦合程度最高的一种，包括一个模块直接访问另一个模块的内部数据；一个模块不通过正常入口转到另一个模块的内部；两个模块有一部分程序代码重叠；一个模块有多个入口等情况。这种耦合方式会使得模块之间的独立性极差，不利于软件的维护和扩展。</p></blockquote><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901155255988.png" alt="image.png"></p><p>假设我们有一个简单的图形绘制系统，其中有一个绘制圆形的模块和一个绘制矩形的模块。在绘制矩形的模块中，直接访问了绘制圆形模块中的圆心坐标数据来确定矩形的一个顶点位置。这种一个模块直接访问另一个模块内部数据的情况就是内容耦合。</p><p>了解和合理运用这些模块耦合类型，能够帮助我们在软件开发中设计出结构更加合理、维护更加方便的软件系统。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模块耦合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商订单 12 小时自动流转：拆解 WFMS 的 6 大模块 + 5 大接口，看懂企业流程自动化的核心逻辑</title>
      <link href="/2025/09/04/04-%E7%94%B5%E5%95%86%E8%AE%A2%E5%8D%95-12-%E5%B0%8F%E6%97%B6%E8%87%AA%E5%8A%A8%E6%B5%81%E8%BD%AC%EF%BC%9A%E6%8B%86%E8%A7%A3-WFMS-%E7%9A%84-6-%E5%A4%A7%E6%A8%A1%E5%9D%97-5-%E5%A4%A7%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%9C%8B%E6%87%82%E4%BC%81%E4%B8%9A%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91/"/>
      <url>/2025/09/04/04-%E7%94%B5%E5%95%86%E8%AE%A2%E5%8D%95-12-%E5%B0%8F%E6%97%B6%E8%87%AA%E5%8A%A8%E6%B5%81%E8%BD%AC%EF%BC%9A%E6%8B%86%E8%A7%A3-WFMS-%E7%9A%84-6-%E5%A4%A7%E6%A8%A1%E5%9D%97-5-%E5%A4%A7%E6%8E%A5%E5%8F%A3%EF%BC%8C%E7%9C%8B%E6%87%82%E4%BC%81%E4%B8%9A%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9A%84%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>你有没有想过：当你在电商平台下单一台笔记本，从付款到收到快递的 12 小时里，为什么订单能精准走过 “审核→备货→出库→物流”4 个环节，还没出过错？​</p><p>其实这不是 “运气好”，而是 WFMS（工作流管理系统）在背后做 “流程操盘手”。作为帮企业搞定 “流程自动化” 的核心工具，WFMS 的工作流参考模型里，6 大模块和 5 大接口才是关键 —— 但很多人要么只知其名，要么觉得 “太技术看不懂”。​</p><p>今天，咱们不用专业术语堆料，就以 “一笔电商订单” 为例子，把 WFMS 的核心逻辑讲透。不管你是企业里负责流程优化的运营，还是想了解 “系统如何帮人省事” 的普通人，都能看懂，甚至能直接套用到自己的工作里。</p><h2 id="一、先搞懂：WFMS-的-6-大模块，是如何让订单-“自动跑”-的？"><a href="#一、先搞懂：WFMS-的-6-大模块，是如何让订单-“自动跑”-的？" class="headerlink" title="一、先搞懂：WFMS 的 6 大模块，是如何让订单 “自动跑” 的？"></a>一、先搞懂：WFMS 的 6 大模块，是如何让订单 “自动跑” 的？</h2><p>很多人觉得 WFMS 复杂，其实它的核心是 “先搭骨架，再填内容”。6 大模块就像搭建流程的 6 个核心部件，少一个都玩不转。</p><h3 id="1-工作流执行服务：订单全生命周期的-“总指挥官”"><a href="#1-工作流执行服务：订单全生命周期的-“总指挥官”" class="headerlink" title="1. 工作流执行服务：订单全生命周期的 “总指挥官”"></a>1. 工作流执行服务：订单全生命周期的 “总指挥官”</h3><blockquote><p>流程定义工具是用于<strong>创建、修改和存储工作流流程定义的软件组件</strong>，它以一种计算机可理解和处理的形式描述业务流程的结构、步骤、规则等信息 。</p></blockquote><p>在订单流程上线前，产品经理要做的第一件事，就是用 “流程定义工具” 把整个流程画出来 —— 不是随便画，而是要明确 3 个关键信息：</p><ul><li>步骤顺序：用户下单→系统审核→仓库备货→出库校验→物流对接→签收完成；​</li><li>责任到人：谁负责备货（仓库 A 区管理员老王）、谁处理异常（客服小美）；​</li><li>时间限制：备货超 2 小时自动提醒，审核超 10 分钟触发预警。</li></ul><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901144241116.png" alt="image.png"></p><p>这一步就像给订单装了 “导航”，后续不管多少笔订单，都按这个图走，不会出现 “有人不知道该做什么”“步骤跳着来” 的问题。<br>举个反例：我之前接触过一家小电商，没做流程定义，全靠人工传消息 —— 有次订单被漏审，直到用户催单才发现，最后赔了 200 元优惠券。这就是没做好 “流程定义” 的坑。</p><h3 id="2-工作流引擎：订单的-“自动调度员”，不用人盯"><a href="#2-工作流引擎：订单的-“自动调度员”，不用人盯" class="headerlink" title="2. 工作流引擎：订单的 “自动调度员”，不用人盯"></a>2. 工作流引擎：订单的 “自动调度员”，不用人盯</h3><blockquote><p>工作流引擎是工作流管理系统的核心执行模块，它负责解释和执行流程定义，创建和管理流程实例，按照流程规则推进流程的运行，为流程中的活动分配资源，并在需要时触发相关的应用程序或服务 。</p></blockquote><p>当用户小李付款后，WFMS 里最核心的 “工作流引擎” 就启动了：​</p><ul><li>它先去 “资源库”（后面会讲）里调之前画好的订单流程；​</li><li>生成一个 “专属订单实例”（相当于给这笔订单发了个 “身份证”）；​</li><li>按步骤派任务：先让系统自动审核订单（比如有没有填错地址、库存够不够），审核过了，立刻把 “备货任务” 推给老王，还附带上 “2 小时内完成” 的提醒。​</li></ul><p>整个过程不用人工干预 —— 你可以理解成，引擎就是 “看不见的调度员”，不用人盯着，就能把任务精准派到每个人头上。</p><h3 id="3-工作流客户端应用：一线员工的-“任务清单”，不用记流程"><a href="#3-工作流客户端应用：一线员工的-“任务清单”，不用记流程" class="headerlink" title="3. 工作流客户端应用：一线员工的 “任务清单”，不用记流程"></a>3. 工作流客户端应用：一线员工的 “任务清单”，不用记流程</h3><blockquote><p>工作流客户端应用是工作流管理系统与最终用户交互的接口，它为用户提供了参与工作流活动的操作界面，使用户能够接收任务、执行任务、提交任务结果以及获取与任务相关的信息等 。</p></blockquote><p>老王是怎么知道有新订单的？靠的就是 “工作流客户端应用”—— 也就是他每天打开的仓库管理 APP。​<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901144840365.png" alt="image.png"></p><p>打开 APP 后，首页直接弹出待办任务：“商品：笔记本电脑；数量：1；库位：A 区 3 排；截止时间：2 小时内”。他不用记 “下一步该做什么”，点 “开始处理”，扫码确认商品，再提交 “备货完成”，流程就自动往下走了。​</p><p>对一线员工来说，这个<strong>客户端的价值就是 “不用背流程”</strong>—— 我之前见过一家公司，让仓库员记 “先核对库存，再填出库单，再报财务”，结果新人经常漏步骤；用上客户端后，错误率直接降了 70%。</p><h3 id="4-流程监控与管理工具：运营的-“监控屏”，异常早发现"><a href="#4-流程监控与管理工具：运营的-“监控屏”，异常早发现" class="headerlink" title="4. 流程监控与管理工具：运营的 “监控屏”，异常早发现"></a>4. 流程监控与管理工具：运营的 “监控屏”，异常早发现</h3><blockquote><p>流程监控与管理工具是用于实时监控工作流流程的运行状态、分析流程性能、管理流程实例以及对流程进行优化的工具集合。它能够跟踪流程中各个活动的执行情况，收集和展示流程相关的数据，帮助管理人员及时发现流程中的问题和瓶颈 。</p></blockquote><p>运营经理张姐每天上班第一件事，就是打开 “流程监控与管理工具”—— 屏幕上能看到所有订单的进度：​</p><ul><li>正常流程的订单：显示 “备货中”“已出库” 等状态；​</li><li>异常订单：比如 3 笔订单 “审核超时”，标红提醒。​</li></ul><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901145047899.png" alt="image.png"></p><p>她点开标红的订单，发现是用户没填详细地址，立刻通过工具把任务重新派给客服，让客服联系用户补全 —— 不用等用户投诉，就能把问题解决。​</p><p>这一步的核心价值是 “不被动”：以前要等用户催单才知道流程卡了，现在实时监控，异常能早处理。</p><h3 id="5-组织模型工具：给任务-“贴标签”，不派错人​"><a href="#5-组织模型工具：给任务-“贴标签”，不派错人​" class="headerlink" title="5. 组织模型工具：给任务 “贴标签”，不派错人​"></a>5. 组织模型工具：给任务 “贴标签”，不派错人​</h3><blockquote><p>组织模型工具是工作流管理系统中用于定义和管理组织架构、人员角色、权限以及它们之间关系的组件，它为工作流流程中的任务分配和执行提供了人员和组织方面的基础支持 。</p></blockquote><p>为什么小李的订单会精准派给老王，而不是其他仓库的人？靠的是 “组织模型工具”。​</p><p>在 WFMS 里，这个工具早就定义好了企业的组织架构：​</p><ul><li>部门对应：仓库 A 区→负责家电类商品；​</li><li>人员对应：仓库 A 区→管理员老王（权限：只能处理 A 区备货，不能改订单金额）；​</li><li>角色权限：客服→能改地址，不能改商品型号。​</li></ul><p>简单说，就是给每个任务 “贴好标签”，确保 “该谁做的谁做，不该做的做不了”。我之前见过一家公司，因为没设权限，仓库员误改了订单价格，最后亏了钱 —— 这就是组织模型工具没用好的教训。</p><h3 id="6-资源库：流程的-“数据库”，数据不丢失​"><a href="#6-资源库：流程的-“数据库”，数据不丢失​" class="headerlink" title="6. 资源库：流程的 “数据库”，数据不丢失​"></a>6. 资源库：流程的 “数据库”，数据不丢失​</h3><blockquote><p>资源库在工作流管理系统中扮演着存储和管理与流程相关的各种信息资源的角色，包括流程定义文档、流程实例数据、组织模型信息、用户信息、应用程序相关数据以及流程运行过程中产生的历史数据等 。</p></blockquote><p>小李的订单信息（地址、商品型号）、流程定义图、老王的操作记录，最后都存在 “资源库” 里。​</p><p>比如物流环节需要核对订单信息，直接从资源库调；订单完成后，这些数据存档，后续用户查单、财务对账，都能随时调出来。​</p><p>资源库的作用就像 “保险柜”—— 把流程相关的所有数据存好，不丢失、不混乱。对企业来说，这不仅是 “方便查”，更是合规要求（比如电商要保存订单数据 3 年以上）。​</p><h2 id="二、再打通：5-大接口，解决-“系统孤岛”-问题​"><a href="#二、再打通：5-大接口，解决-“系统孤岛”-问题​" class="headerlink" title="二、再打通：5 大接口，解决 “系统孤岛” 问题​"></a>二、再打通：5 大接口，解决 “系统孤岛” 问题​</h2><p>光有模块还不够 —— 企业里还有支付系统、物流系统、企业微信这些工具，WFMS 要和它们打通，靠的就是 5 大接口。​</p><h3 id="1-流程定义接口：一次设计，多端复用，省时间​"><a href="#1-流程定义接口：一次设计，多端复用，省时间​" class="headerlink" title="1. 流程定义接口：一次设计，多端复用，省时间​"></a>1. 流程定义接口：一次设计，多端复用，省时间​</h3><blockquote><p>流程定义接口是工作流管理系统与外部流程设计工具或其他系统进行流程定义交互的通道，它允许将在外部创建的流程定义导入到工作流管理系统中，也支持将工作流管理系统中的流程定义导出或共享给其他相关系统 。</p></blockquote><p>产品经理最初画订单流程时，用的是专业的流程建模软件（比如 Visio），画好后，通过 “流程定义接口” 直接导入 WFMS—— 不用在 WFMS 里重新画一遍，省了 2 天时间。​</p><p>后来平台新增 “家电类订单需二次质检” 的规则，产品经理在建模软件里改好，再通过接口同步到 WFMS，10 分钟就完成了更新。​</p><p>这个接口的价值就是 “不重复劳动”：很多企业以前改流程，要在多个系统里改，容易出错；现在一次设计，多端复用，效率高还不容易错。​</p><h3 id="2-工作流客户端应用接口：提醒-“追着人跑”，不遗漏​"><a href="#2-工作流客户端应用接口：提醒-“追着人跑”，不遗漏​" class="headerlink" title="2. 工作流客户端应用接口：提醒 “追着人跑”，不遗漏​"></a>2. 工作流客户端应用接口：提醒 “追着人跑”，不遗漏​</h3><blockquote><p>工作流客户端应用接口用于实现工作流管理系统与各种客户端应用（如企业即时通讯工具、移动 APP 等）之间的集成和交互，使得工作流相关的任务提醒、操作功能等能够无缝地推送到用户常用的客户端环境中 。</p></blockquote><p>老王在仓库理货时，没看仓库 APP，为什么还能收到新订单提醒？因为 “工作流客户端应用接口” 把 WFMS 和企业微信打通了。​</p><p>有新任务时，接口会自动把提醒推到老王的企业微信：“有 1 笔笔记本订单需备货，截止 2 小时内”。他点提醒就能跳转到仓库 APP 处理，不用频繁刷 APP。​</p><p>对员工来说，这个接口解决了 “漏看任务” 的问题 —— 我之前问过老王，没打通企业微信时，他每天要刷 5 次 APP 看有没有新任务；现在不用刷，提醒直接来，效率高了不少。​</p><h3 id="3-应用程序调用接口：数据同步，流程自动触发​"><a href="#3-应用程序调用接口：数据同步，流程自动触发​" class="headerlink" title="3. 应用程序调用接口：数据同步，流程自动触发​"></a>3. 应用程序调用接口：数据同步，流程自动触发​</h3><blockquote><p>应用程序调用接口是工作流管理系统与其他应用系统进行数据交互和功能调用的接口，通过该接口，工作流管理系统能够在流程执行过程中触发其他应用程序的功能，实现数据的共享和业务逻辑的协同，同时也能接收来自其他应用系统的数据和事件反馈 。</p></blockquote><p>小李付款后，为什么 WFMS 会立刻启动流程？因为 “应用程序调用接口” 把支付系统和 WFMS 连起来了。​</p><p>支付成功的瞬间，支付系统通过这个接口 “告诉” WFMS：“订单已付款，编号 XXX”，WFMS 就自动启动订单流程 —— 不用人工手动录入订单、点 “启动流程”，完全自动化。​</p><p>这个接口是 “流程自动化的关键”：如果没有它，每天几千笔订单，需要专人录入启动，不仅慢，还容易错。​</p><h3 id="4-工作流引擎互操作接口：跨系统协同，不用人工传数据​"><a href="#4-工作流引擎互操作接口：跨系统协同，不用人工传数据​" class="headerlink" title="4. 工作流引擎互操作接口：跨系统协同，不用人工传数据​"></a>4. 工作流引擎互操作接口：跨系统协同，不用人工传数据​</h3><blockquote><p>工作流引擎互操作接口是用于实现不同工作流引擎之间相互通信和协作的接口规范，它使得基于不同工作流引擎构建的系统能够在流程层面进行交互、共享流程实例信息、协同推进流程执行，从而打破不同工作流系统之间的壁垒 。</p></blockquote><p>小李的订单要对接顺丰物流，而顺丰用的是自己的工作流系统 —— 两个系统怎么协同？靠的是 “工作流引擎互操作接口”。​</p><p>WFMS 通过这个接口，把 “订单出库信息” 传给顺丰的系统；顺丰生成物流单号后，再通过接口把单号回传给 WFMS—— 不用仓库员在两个系统间复制粘贴数据，全程自动。​</p><p>这个接口解决了 “跨系统不通” 的痛点：很多企业对接第三方系统（比如物流、支付）时，靠人工传数据，每天花 1 小时不说，还容易录错单号；用上接口后，这些工作全省了。​</p><h3 id="5-系统管理与监控接口：运维的-“工具箱”，保障系统稳定​"><a href="#5-系统管理与监控接口：运维的-“工具箱”，保障系统稳定​" class="headerlink" title="5. 系统管理与监控接口：运维的 “工具箱”，保障系统稳定​"></a>5. 系统管理与监控接口：运维的 “工具箱”，保障系统稳定​</h3><blockquote><p>系统管理与监控接口为工作流管理系统的运维人员提供了对系统进行管理、监控和维护的途径，通过该接口可以获取系统的运行状态信息、性能指标，执行系统配置、故障诊断、数据备份与恢复等管理操作 。</p></blockquote><p>运维工程师小陈每天要做的，就是通过 “系统管理与监控接口” 查看 WFMS 的状态：​</p><ul><li><p>性能数据：CPU 使用率、内存占用、接口响应速度；​</p></li><li><p>异常报警：比如 “资源库读取速度变慢”。​</p></li></ul><p>有次他发现资源库读取慢，立刻通过接口调整数据库参数，10 分钟就恢复了 —— 如果没这个接口，要等到订单处理卡顿，用户投诉，才会发现问题，影响就大了。</p><h2 id="三、最后：普通人该如何理解-WFMS？3-个实用视角​"><a href="#三、最后：普通人该如何理解-WFMS？3-个实用视角​" class="headerlink" title="三、最后：普通人该如何理解 WFMS？3 个实用视角​"></a>三、最后：普通人该如何理解 WFMS？3 个实用视角​</h2><p>讲完模块和接口，可能有人会问：我不是做技术的，也不是做运营的，了解 WFMS 有什么用？其实可以从 3 个视角看：​</p><h3 id="1-对企业：WFMS-不是-“奢侈品”，是-“效率刚需”​"><a href="#1-对企业：WFMS-不是-“奢侈品”，是-“效率刚需”​" class="headerlink" title="1. 对企业：WFMS 不是 “奢侈品”，是 “效率刚需”​"></a>1. 对企业：WFMS 不是 “奢侈品”，是 “效率刚需”​</h3><p>很多中小企业觉得 “WFMS 太贵，没必要”，但实际上：​</p><ul><li>能省人工：以前要 3 个人盯订单流程，现在 1 个人管监控就行；​</li><li>能降错误：人工传数据容易错，系统自动化后错误率大降；​</li><li>能快响应：用户有问题，能快速定位流程节点，不用查半天。​</li></ul><p>我接触过一家 50 人规模的电商，用上 WFMS 后，订单处理效率提了 40%，客服投诉降了 60%—— 算下来，半年就收回了系统成本。​</p><h3 id="2-对职场人：懂-WFMS，能帮你解决-“流程痛点”​"><a href="#2-对职场人：懂-WFMS，能帮你解决-“流程痛点”​" class="headerlink" title="2. 对职场人：懂 WFMS，能帮你解决 “流程痛点”​"></a>2. 对职场人：懂 WFMS，能帮你解决 “流程痛点”​</h3><p>如果你在工作中遇到 “流程混乱”“总漏步骤”“异常难发现” 的问题，其实可以想想：​</p><ul><li>是不是没做好 “流程定义”？​</li><li>是不是缺了 “监控工具”？​</li></ul><p>比如你是行政，负责报销流程，总有人漏填发票信息 —— 其实可以建议公司用 WFMS 的 “流程定义工具”，把 “填发票信息” 设为必填步骤，没填就提交不了，问题就解决了。​</p><h3 id="3-对用户：知道-“背后有系统”，能更理性维权​"><a href="#3-对用户：知道-“背后有系统”，能更理性维权​" class="headerlink" title="3. 对用户：知道 “背后有系统”，能更理性维权​"></a>3. 对用户：知道 “背后有系统”，能更理性维权​</h3><p>比如你下单后，订单一直显示 “备货中”，可以先联系客服，让他们查 WFMS 的 “流程监控工具”，看看是卡在仓库备货，还是物流对接 —— 不用只说 “我的订单怎么还没发”，能更精准地解决问题。​</p><p>其实 WFMS 没那么 “高大上”，它的核心就是 “让流程自动化，让少出错，让人人省事”。下次你在电商下单，或者在公司走审批流程时，不妨想想：这背后，是不是也有 WFMS 在默默工作？​</p><p>如果你的公司正在考虑做流程自动化，或者你在工作中遇到了流程痛点，欢迎在评论区聊聊，我们可以一起分析怎么用 WFMS 解决～</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 软件工程中需求获取手段全解析</title>
      <link href="/2025/09/04/12-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96%E6%89%8B%E6%AE%B5%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2025/09/04/12-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96%E6%89%8B%E6%AE%B5%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在软件工程领域，需求获取是项目成功的关键起点，它旨在准确收集和理解用户对软件系统的期望与要求。以下将详细介绍用户访谈、问卷调查、采样技术、情节串联板、联合需求计划（JRP）这五种常见的需求获取手段。</p><h2 id="一、用户访谈"><a href="#一、用户访谈" class="headerlink" title="一、用户访谈"></a>一、用户访谈</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>用户访谈是需求获取人员与用户直接进行面对面交流，通过提问、倾听和互动，深入了解用户的业务流程、工作需求、期望以及痛点等信息的一种需求获取方法。它能建立起需求获取者与用户之间的直接沟通桥梁，获取丰富且详细的一手资料。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>新系统开发</strong>：当开发全新的软件系统，对业务领域不熟悉时，通过与不同层次、不同岗位的用户进行访谈，全面了解业务全貌。</li><li><strong>复杂业务流程梳理</strong>：对于业务流程复杂、涉及多个环节和角色的项目，访谈能深入挖掘各环节的细节和相互关系。</li><li><strong>个性化需求挖掘</strong>：如果软件需要满足特定用户群体或个体的特殊需求，访谈可针对性地获取这些个性化信息。</li></ul><h3 id="实施步骤"><a href="#实施步骤" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><strong>准备阶段</strong>：明确访谈目标，确定访谈对象（如业务专家、一线操作人员、管理人员等），设计详细的访谈提纲，涵盖业务流程、工作目标、现有问题、期望功能等方面的问题。同时，预约访谈时间和地点，确保访谈环境安静、不受干扰。</li><li><strong>进行阶段</strong>：开场时，简要介绍访谈目的和流程，营造轻松友好的氛围。按照提纲有序提问，鼓励用户充分表达观点，注意倾听用户的回答，不轻易打断，对于模糊或不清楚的回答，及时进行追问和确认。可以使用录音或记录关键信息的方式，确保信息准确完整。</li><li><strong>总结阶段</strong>：访谈结束前，向用户总结本次访谈获取的关键信息，确认是否准确。感谢用户的参与，并告知用户后续可能还会有进一步的沟通。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设要开发一款医院的电子病历管理系统。需求获取人员与医生、护士、病案管理人员进行访谈。与医生访谈时，询问日常病历书写流程、所需记录的信息项、对病历检索和调阅的需求等；与护士访谈，了解护理记录的内容和频率、与医生病历信息的交互需求；与病案管理人员访谈，了解病历归档、存储和统计的工作要求。通过这些访谈，全面了解电子病历管理系统的需求。</p><h3 id="遵循原则"><a href="#遵循原则" class="headerlink" title="遵循原则"></a>遵循原则</h3><ul><li><strong>中立原则</strong>：访谈者保持中立态度，不引导用户回答特定答案，确保获取的信息真实客观。</li><li><strong>积极倾听原则</strong>：专注倾听用户表达，理解其背后的真实意图，给予用户充分的表达机会。</li><li><strong>清晰原则</strong>：提问清晰明确，避免使用专业术语或模糊不清的表述，确保用户能够准确理解问题。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点</strong>：能获取深入、详细且个性化的信息；可以根据用户回答灵活调整问题，进一步挖掘需求；通过面对面交流，建立良好的沟通关系，增加用户对项目的参与感。</li><li><strong>缺点</strong>：耗费时间和人力成本较高，尤其是涉及多个用户时；访谈结果可能受访谈者个人偏见、表达能力以及用户主观因素影响，导致信息不准确或不完整；访谈信息整理和分析工作量较大。</li></ul><h2 id="二、问卷调查"><a href="#二、问卷调查" class="headerlink" title="二、问卷调查"></a>二、问卷调查</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>问卷调查是通过设计一系列书面问题，向大量潜在用户或相关人员发放问卷，收集他们对软件系统的看法、需求、期望等信息的一种需求获取方式。它能在相对短的时间内，广泛收集不同群体的反馈。</p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>大范围用户调研</strong>：当需要了解众多用户的普遍需求、意见或行为模式时，如面向大众的互联网产品。</li><li><strong>统计性数据收集</strong>：对于一些需要进行量化分析的数据，如用户使用频率、满意度评分等，问卷调查能高效收集大量样本数据。</li><li><strong>初步需求筛选</strong>：在项目初期，对众多可能的需求进行初步筛选和优先级排序，确定重点关注方向。</li></ul><h3 id="实施步骤-1"><a href="#实施步骤-1" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><strong>问卷设计</strong>：明确问卷目的，根据目标受众和需求设计问题。问题应简洁明了、易于回答，包括选择题、简答题、量表题等多种题型。确保问卷逻辑清晰，先易后难，避免诱导性问题。设计完成后，进行小范围预测试，检查问卷的合理性和有效性，根据反馈进行修改。</li><li><strong>问卷发放</strong>：选择合适的发放渠道，如在线问卷平台（问卷星等）、电子邮件、现场发放等。确定发放对象范围，确保涵盖相关的各类用户群体。设定问卷回收期限，鼓励用户及时填写。</li><li><strong>数据整理与分析</strong>：回收问卷后，对数据进行整理，剔除无效问卷（如回答不完整、明显随意作答等）。运用统计学方法对选择题、量表题等量化数据进行分析，对简答题进行分类归纳，提取关键信息。根据分析结果总结用户需求和反馈。</li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>要开发一款手机运动健身APP，通过在线问卷向运动爱好者、健身教练等群体发放问卷。问卷中设置问题如“您每周运动的频率是？”“您常用的运动健身方式有哪些？”“您希望APP具备哪些功能（如运动记录、训练计划制定、饮食建议等）”等。通过对大量问卷数据的分析，了解用户对运动健身APP的需求偏好。</p><h3 id="遵循原则-1"><a href="#遵循原则-1" class="headerlink" title="遵循原则"></a>遵循原则</h3><ul><li><strong>目标明确原则</strong>：每个问题都应围绕问卷目的设计，避免无关问题。</li><li><strong>简洁性原则</strong>：问题表述简洁易懂，避免复杂句式和专业术语，尽量减少用户填写时间。</li><li><strong>可靠性原则</strong>：确保问题设计合理，能准确获取所需信息，避免模糊或歧义性问题影响数据可靠性。</li></ul><h3 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点</strong>：可快速收集大量样本数据，覆盖范围广，成本相对较低；数据易于统计分析，能发现普遍存在的需求和问题；问卷可标准化设计，保证每个用户回答的一致性，便于比较分析。</li><li><strong>缺点</strong>：问题相对固定，难以深入挖掘用户深层次的需求和潜在想法；用户可能因对问题理解偏差、缺乏耐心等原因，导致回答不准确或不完整；无法实时澄清用户的疑问，对于开放式问题的回答质量可能参差不齐，增加分析难度。</li></ul><h2 id="三、采样技术"><a href="#三、采样技术" class="headerlink" title="三、采样技术"></a>三、采样技术</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>采样技术是从总体用户或数据中选取一部分有代表性的样本进行研究，通过对样本的分析来推断总体的需求特征。它基于统计学原理，在保证一定准确性的前提下，减少数据收集和分析的工作量。</p><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>总体规模庞大</strong>：当用户群体数量巨大，无法对所有用户进行全面调研时，通过采样选取有代表性的样本进行研究。</li><li><strong>资源有限</strong>：在时间、人力、资金等资源有限的情况下，采样技术能以较小的成本获取关于总体需求的大致信息。</li><li><strong>快速获取初步需求</strong>：在项目初期需要快速了解需求概况，为后续深入调研提供方向时，采样可快速提供一个近似的需求轮廓。</li></ul><h3 id="实施步骤-2"><a href="#实施步骤-2" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><strong>定义总体</strong>：明确需要研究的用户或数据的总体范围，例如某电商平台的所有注册用户、某企业内部所有使用特定办公软件的员工等。</li><li><strong>选择采样方法</strong>：<ul><li><strong>随机采样</strong>：从总体中随机抽取样本，每个个体被选中的概率相等。例如使用随机数生成器选取电商平台注册用户的ID作为样本。</li><li><strong>分层采样</strong>：将总体按照某些特征（如年龄、性别、职业等）分成不同层次，然后从每个层次中独立进行随机采样。如将电商平台用户按年龄分为青年、中年、老年三层，分别从各层中抽取一定数量用户。</li><li><strong>系统采样</strong>：按照一定的抽样距离从总体中抽取样本。例如每隔100个电商平台用户抽取一个作为样本。</li></ul></li><li><strong>确定样本大小</strong>：根据总体规模、可接受的误差范围和置信水平，运用统计学公式计算合适的样本大小。一般来说，总体规模越大、可接受误差越小、置信水平越高，所需样本量越大。</li><li><strong>收集样本数据</strong>：通过用户访谈、问卷调查等方式对选取的样本进行数据收集。</li><li><strong>分析样本并推断总体</strong>：对样本数据进行分析，根据样本特征推断总体的需求特征，如计算样本中用户对某功能的需求比例，以此估计总体中对该功能有需求的用户比例。</li></ol><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p>某大型连锁超市要开发一款会员管理系统，其会员数量达数十万。采用分层采样技术，按会员消费金额将会员分为高、中、低消费层，从每层中随机抽取一定数量会员进行访谈和问卷调查，了解他们对会员积分、优惠活动、会员专属服务等方面的需求，进而推断全体会员对会员管理系统的需求。</p><h3 id="遵循原则-2"><a href="#遵循原则-2" class="headerlink" title="遵循原则"></a>遵循原则</h3><ul><li><strong>代表性原则</strong>：选取的样本要能准确代表总体的特征，确保样本与总体在关键属性上分布相似。</li><li><strong>随机性原则</strong>：在采样过程中尽量保证随机性，避免人为偏见对样本选取的影响。</li><li><strong>适度性原则</strong>：样本大小要适中，既不能过大造成资源浪费，也不能过小导致结果不准确。</li></ul><h3 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点</strong>：在资源有限的情况下，能快速、高效地获取总体需求信息，成本较低；基于统计学原理，具有一定的科学性和可靠性；通过合理的采样方法，可以较好地反映总体特征。</li><li><strong>缺点</strong>：如果采样方法不当或样本量过小，可能导致样本不具有代表性，从而使推断结果与实际总体需求偏差较大；对采样人员的统计学知识要求较高，操作不当容易出现误差；无法像全面调研那样获取关于总体的所有细节信息。</li></ul><h2 id="四、情节串联板"><a href="#四、情节串联板" class="headerlink" title="四、情节串联板"></a>四、情节串联板</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>情节串联板是一种以图形化、故事化的方式展示软件系统使用场景和流程的需求获取方法。它通过一系列连续的画面或场景，描述用户与软件系统在特定情境下的交互过程，帮助需求获取人员和用户直观地理解系统功能和业务流程。</p><h3 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>需求可视化</strong>：当需求较为抽象，难以用文字清晰表述时，通过情节串联板将需求以可视化形式呈现，便于用户和开发团队理解。</li><li><strong>用户体验设计</strong>：在关注用户与系统交互体验的项目中，情节串联板可用于设计和优化用户操作流程，发现潜在的用户体验问题。</li><li><strong>团队沟通协作</strong>：作为一种直观的沟通工具，促进需求获取人员、开发人员、设计人员以及用户之间的沟通与协作，确保各方对需求的理解一致。</li></ul><h3 id="实施步骤-3"><a href="#实施步骤-3" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><strong>确定主题和范围</strong>：明确要描述的软件功能或业务场景，例如电商平台的商品购买流程、在线教育平台的课程学习过程等。</li><li><strong>收集素材</strong>：与用户沟通，了解他们在实际使用场景中的操作步骤、决策点、可能遇到的问题等信息。收集相关的界面设计草图、业务流程图等素材，为绘制情节串联板做准备。</li><li><strong>绘制情节串联板</strong>：使用纸笔、白板、绘图软件（如Axure、Visio等）绘制一系列画面，每个画面展示一个关键的交互步骤或场景。在画面中添加文字说明，描述用户的操作、系统的响应以及相关的业务规则。按照业务流程的先后顺序排列画面，形成一个连贯的故事。</li><li><strong>评审与修改</strong>：邀请用户、开发团队等相关人员对情节串联板进行评审，收集反馈意见。根据反馈对情节串联板进行修改和完善，确保其准确反映用户需求和业务流程。</li></ol><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>为开发一款在线点餐APP，绘制情节串联板展示点餐流程。第一幅画面展示用户打开APP后的餐厅列表界面，文字说明“用户打开APP，浏览附近餐厅列表”；第二幅画面是用户点击进入某餐厅详情页，展示菜品图片和介绍，文字说明“用户点击餐厅，查看菜品信息”；接着是用户选择菜品加入购物车、确认订单、支付等画面，详细描绘每个步骤中用户与APP的交互过程。</p><h3 id="遵循原则-3"><a href="#遵循原则-3" class="headerlink" title="遵循原则"></a>遵循原则</h3><ul><li><strong>真实性原则</strong>：情节串联板应基于真实的用户使用场景和业务流程，避免虚构或脱离实际。</li><li><strong>简洁性原则</strong>：画面和文字表述要简洁明了，突出关键信息，避免过多细节导致信息过载。</li><li><strong>交互性原则</strong>：重点体现用户与系统之间的交互，包括用户操作和系统反馈，以展示系统的功能逻辑。</li></ul><h3 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点</strong>：以直观、易懂的方式呈现需求，降低沟通成本，提高各方对需求的理解一致性；有助于发现需求中的逻辑漏洞和用户体验问题，提前进行优化；能够激发用户和开发团队的想象力，促进创新设计。</li><li><strong>缺点</strong>：绘制情节串联板需要一定的绘图和设计能力，对于复杂系统的需求描述可能不够全面和精确；由于是图形化表达，难以涵盖所有的需求细节，可能需要结合其他需求获取方法进行补充。</li></ul><h2 id="五、联合需求计划（JRP）"><a href="#五、联合需求计划（JRP）" class="headerlink" title="五、联合需求计划（JRP）"></a>五、联合需求计划（JRP）</h2><h3 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h3><p>联合需求计划（JRP）是一种集中各方利益相关者（如用户、开发人员、管理人员等），通过一系列有组织、有计划的会议，共同讨论、分析和确定软件系统需求的方法。它强调多方协作、面对面沟通，旨在达成对需求的共识，减少误解和偏差。</p><h3 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li><strong>需求复杂且多方参与</strong>：当软件项目涉及多个部门、多种角色的利益相关者，需求复杂且各方需求存在差异和冲突时，JRP能促进各方充分沟通，协调需求。</li><li><strong>项目时间紧迫</strong>：需要在较短时间内集中获取需求并达成共识，以加快项目进度。JRP通过集中会议的方式，高效地整合各方意见。</li><li><strong>对需求质量要求高</strong>：期望通过各方深度参与和协作，确保需求的完整性、准确性和一致性，提高需求质量。</li></ul><h3 id="实施步骤-4"><a href="#实施步骤-4" class="headerlink" title="实施步骤"></a>实施步骤</h3><ol><li><strong>准备阶段</strong>：成立JRP小组，包括需求获取人员、用户代表、开发团队成员、管理人员等。确定会议的目标、议程和时间安排。提前收集相关资料，如业务文档、现有系统介绍等，分发给小组成员，让他们做好充分准备。</li><li><strong>会议阶段</strong>：<ul><li><strong>开场</strong>：介绍会议目的、议程和规则，营造开放、合作的氛围。</li><li><strong>需求陈述</strong>：由需求获取人员或业务专家介绍现有业务流程和初步的需求设想，让小组成员对项目有整体了解。</li><li><strong>讨论与分析</strong>：针对需求进行详细讨论，各方发表意见和建议，分析需求的合理性、可行性以及可能存在的冲突。通过提问、澄清、辩论等方式，深入挖掘需求细节。</li><li><strong>达成共识</strong>：对于存在分歧的需求，通过协商、妥协等方式寻求共识。可以采用投票、举手表决等方式对关键需求进行决策。</li><li><strong>记录与总结</strong>：安排专人记录会议讨论内容和达成的共识，在会议结束时，对本次会议的成果进行总结，明确下一步的工作任务。</li></ul></li><li><strong>后续阶段</strong>：整理会议记录，形成需求文档草案，分发给小组成员进行审核。根据反馈意见对需求文档进行修改和完善，最终形成正式的需求规格说明书。</li></ol><h3 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h3><p>某企业要开发一套集成的企业资源规划（ERP）系统，涉及财务、采购、销售、生产等多个部门。组织JRP会议，各部门代表、开发团队成员和企业高层管理人员参加。在会议上，各部门依次陈述本部门的业务流程和对ERP系统的需求，如财务部门提出财务核算、报表生成的需求，采购部门提出供应商管理、采购订单处理的需求等。然后针对这些需求进行讨论，解决部门间需求冲突，如采购付款流程与财务结算流程的衔接问题，最终达成对ERP系统需求的共识。</p><h3 id="遵循原则-4"><a href="#遵循原则-4" class="headerlink" title="遵循原则"></a>遵循原则</h3><ul><li><strong>平等参与原则</strong>：确保所有小组成员都有平等的发言机会，尊重各方意见，避免一方主导会议。</li><li><strong>开放沟通原则</strong>：鼓励小组成员开放、坦诚地交流，积极提出问题和建议，营造良好的沟通氛围。</li><li><strong>目标导向原则</strong>：会议始终围绕确定软件系统需求这一目标进行，避免讨论偏离主题，提高会议效率。</li></ul><h3 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><strong>优点</strong>：能快速整合各方需求，减少需求误解和冲突，提高需求的准确性和一致性；促进各方之间的沟通与协作，增强项目的团队凝聚力；由于各方共同参与需求确定过程，对需求的认可度高，有利于后续项目的推进。</li><li><strong>缺点</strong>：组织会议的成本较高，需要协调各方时间，且会议过程需要精心组织和引导，否则容易出现混乱或效率低下的情况；可能存在个别成员因担心影响人际关系而不愿表达真实意见，导致需求收集不全面；对于一些涉及敏感信息或个人隐私的需求，可能不适合在公开会议上讨论。</li></ul><p>综上所述，这五种需求获取手段各有特点和适用场景。在实际的软件工程中，通常需要综合运用多种方法，以全面、准确地获取软件系统的需求，为项目的成功奠定坚实基础。 </p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求获取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户需求层次划分范式解析：概念、示例</title>
      <link href="/2025/09/03/11-%E7%94%A8%E6%88%B7%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E5%88%92%E5%88%86%E8%8C%83%E5%BC%8F%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E7%A4%BA%E4%BE%8B/"/>
      <url>/2025/09/03/11-%E7%94%A8%E6%88%B7%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E5%88%92%E5%88%86%E8%8C%83%E5%BC%8F%E8%A7%A3%E6%9E%90%EF%BC%9A%E6%A6%82%E5%BF%B5%E3%80%81%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>在软件开发与项目管理过程中，准确理解和把握用户需求至关重要。而用户需求存在多种划分范式，每种范式从不同角度对需求进行剖析，为项目团队提供全面、深入理解需求的途径。下面我们将详细解读三种常见的用户需求层次划分范式。</p><h2 id="一、业务需求、用户需求、系统需求"><a href="#一、业务需求、用户需求、系统需求" class="headerlink" title="一、业务需求、用户需求、系统需求"></a>一、业务需求、用户需求、系统需求</h2><p>把需求划分为业务、用户和系统这三个层次，是一种常规的划分方法。</p><h3 id="业务需求"><a href="#业务需求" class="headerlink" title="业务需求"></a>业务需求</h3><blockquote><p>反映了组织或企业为达成特定业务目标所提出的高层次需求。它通常由企业高层管理人员或业务负责人提出，着眼于整个业务流程和战略方向。</p></blockquote><p>比如，某电商企业计划拓展海外市场，其业务需求可能是 “在未来一年内，将国际业务销售额提升至总销售额的 30%，通过优化电商平台，支持多语言、多币种结算功能，以满足不同国家和地区用户的购物需求”。</p><p>这类需求<strong>适用于项目规划初期</strong>，帮助项目团队明确项目的商业目标和方向，为后续需求分析和系统设计提供宏观指导。常用于战略决策、资源分配等场景。</p><h3 id="用户需求"><a href="#用户需求" class="headerlink" title="用户需求"></a>用户需求</h3><blockquote><p>用户是从用户角度出发，描述用户在使用软件系统时希望达成的目标或执行的任务。这些需求聚焦于用户的实际操作和体验。</p></blockquote><p>比如，一位电商平台用户希望能够方便地找到心仪商品，其用户需求可能表述为 “用户能够通过搜索框输入关键词，快速筛选出符合需求的商品列表，并可根据价格、销量等条件进行排序”。</p><p>在需求收集阶段，通过与用户直接沟通或观察用户行为获取。有助于设计出符合用户使用习惯和期望的系统界面与操作流程，提高用户满意度。适用于用户体验设计、界面原型制作等场景。</p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><blockquote><p>系统需求可以进一步细分为功能需求和非功能需求。功能需求定义了系统必须执行的具体功能，即系统要做什么；非功能需求则描述了系统的性能、可靠性、可用性等方面的特性，是对系统的质量属性要求。</p></blockquote><p>比如，电商平台系统需具备商品展示功能，“系统应能够展示商品的图片、名称、价格、详细描述等信息，确保商品信息准确无误且实时更新”。这是功能需求；而系统需求可能是：在性能方面，“电商平台在促销活动期间，页面加载时间应不超过 3 秒，以保证用户流畅购物体验”。</p><p>系统需求适用于在需求规格说明书撰写阶段，对系统进行详细定义。功能需求指导系统的功能模块设计与开发；非功能需求则影响系统架构选型、技术方案制定等，确保系统满足质量要求。适用于系统设计、开发、测试等全生命周期阶段。</p><h2 id="二、按照质量功能部署（QFD）划分"><a href="#二、按照质量功能部署（QFD）划分" class="headerlink" title="二、按照质量功能部署（QFD）划分"></a>二、按照质量功能部署（QFD）划分</h2><p>质量功能部署将需求划分为：常规需求、期望需求和意外需求。</p><h3 id="常规需求"><a href="#常规需求" class="headerlink" title="常规需求"></a>常规需求</h3><blockquote><p>常规需求是用户认为系统理所当然应具备的基本功能。若这些需求未得到满足，用户会感到不满意，但满足了这些需求，也不会带来额外惊喜。</p></blockquote><p>举例来说，对于一款在线文档编辑工具，能够新建、打开、保存文档是常规需求。用户认为这是工具应有的基本功能，如果不具备，用户将无法接受该产品。</p><p>常规需求是定义产品的基本功能边界，确保产品满足用户的基本使用要求。在产品的基础功能设计与开发阶段重点关注，保证产品的可用性。</p><h3 id="期望需求"><a href="#期望需求" class="headerlink" title="期望需求"></a>期望需求</h3><blockquote><p>期望需求是用户期望系统具备的功能或特性，这些需求的满足程度与用户满意度呈正相关。提供这些需求会提升用户满意度，反之则会降低。</p></blockquote><p>比如，在线文档编辑工具支持多人实时协作编辑，且操作流畅。用户期望在团队协作场景下能高效共同编辑文档，当该功能实现且体验良好时，用户对产品的满意度会提高。</p><p>好的期望需求设计有助于产品在市场竞争中脱颖而出。在产品优化和差异化竞争阶段，通过满足用户期望需求，提升产品竞争力和用户满意度。常用于市场调研、竞品分析后，针对性地完善产品功能。</p><h3 id="意外需求"><a href="#意外需求" class="headerlink" title="意外需求"></a>意外需求</h3><blockquote><p>意外需求又称魅力需求，是用户未曾预期到，但一旦实现会让用户非常惊喜，从而极大提升用户忠诚度的需求。</p></blockquote><p>还是用在线文档编辑工具举例。在线文档编辑工具具备智能纠错、格式美化建议功能，这些功能超出用户常规预期。当用户使用过程中发现这些贴心功能时，会对产品产生好感和依赖。这就是意外需求。</p><p>在创新产品设计或寻求产品突破时，关注意外需求可带来独特的竞争优势。通过挖掘用户潜在需求，为产品创造独特卖点，吸引更多用户并提高用户忠诚度。</p><h2 id="在统一（UP）过程中，按照-FURPS-模型分类"><a href="#在统一（UP）过程中，按照-FURPS-模型分类" class="headerlink" title="在统一（UP）过程中，按照 FURPS + 模型分类"></a>在统一（UP）过程中，按照 FURPS + 模型分类</h2><p>统一过程中将需求按照 FURPS + 模型分类，包括：功能性（特性、功能、安全性）、可用性（人性化因素、帮助、文档）、可靠性（故障频率、可恢复性、可预测性）、性能（响应时间、吞吐量、准确性、有消息、资源利用率）、可支持性（适应性、可维护性、国际化、可配置性），“+” 指辅助和次要因素。</p><h3 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h3><p>包括以下三个方面</p><ul><li><strong>特性</strong>：系统提供的独特功能或能力，区别于其他竞品的特点。比如，某移动支付 APP 具备指纹支付特性，方便快捷且安全，区别于传统密码支付方式。</li><li><strong>功能</strong>：系统为满足用户需求而执行的具体操作或任务。比如，APP 能够实现扫码支付功能，用户扫描商家二维码完成支付操作。</li><li><strong>安全性</strong>：确保系统和数据免受非法访问、破坏或泄露的能力。比如， 支付过程采用 SSL 加密技术，防止用户支付信息泄露。</li></ul><p>对于功能性需求，在系统功能规划和设计阶段，明确系统要实现的具体功能、特性及安全要求，确保系统满足业务和用户需求。适用于功能模块设计、安全架构规划等场景。</p><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><p>它关注用户与系统交互的便捷性和舒适性。包括：</p><ul><li><strong>人性化因素</strong>：包括界面设计是否符合人体工程学、操作是否简便易懂等。比如，移动支付 APP 界面设计简洁，图标清晰，操作按钮大小适合手指点击。</li><li><strong>帮助</strong>：系统为用户提供的操作指导和问题解决支持。比如，在支付页面提供常见问题解答入口，用户遇到问题可快速获取帮助。</li><li><strong>文档</strong>：对系统功能、使用方法等的书面描述，方便用户学习和使用。比如，APP 提供详细的使用指南文档，新用户可通过阅读文档了解各项功能使用方法。</li></ul><p>在用户界面设计和交互设计阶段，重点考虑可用性因素，提升用户体验。常用于原型设计、用户测试等环节，确保系统易用、易理解。</p><h3 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h3><p>是指系统在规定条件下和规定时间内完成规定功能的能力。包括：</p><ul><li><strong>故障频率</strong>：系统出现故障的频繁程度。比如，移动支付 APP 每月故障次数不超过 1 次。</li><li><strong>可恢复性</strong>：系统发生故障后恢复正常运行的能力和速度。比如，若支付过程中出现网络故障，系统在网络恢复后能自动恢复支付流程，且恢复时间不超过 1 分钟。</li><li><strong>可预测性</strong>：系统行为的可预测程度，用户能否预期系统对操作的响应。比如，用户点击支付按钮后，系统会明确显示支付处理进度，用户可预期支付结果。</li></ul><p>在系统架构设计和稳定性测试阶段，关注可靠性指标，保障系统稳定运行。适用于系统部署、压力测试等场景，确保系统在各种情况下可靠工作。</p><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>性能是衡量系统执行任务的效率和效果。包括：</p><ul><li><strong>响应时间</strong>：系统对用户请求做出响应的时间。比如，用户发起支付请求后，APP 在 2 秒内返回支付结果。</li><li><strong>吞吐量</strong>：系统在单位时间内处理的任务数量。比如，在促销活动高峰时段，APP 每分钟可处理 1000 笔支付交易。</li><li><strong>准确性</strong>：系统输出结果与预期结果的符合程度。比如，支付金额与用户输入金额完全一致，无误差。<br>在系统性能优化阶段，针对性能指标进行分析和改进。适用于性能调优、硬件资源规划等场景，确保系统高效运行。</li></ul><h3 id="可支持性"><a href="#可支持性" class="headerlink" title="可支持性"></a>可支持性</h3><p>可支持性涉及系统在整个生命周期内的维护、调整和适应变化的能力。包括：</p><ul><li><strong>适应性</strong>：系统能够适应不同环境或需求变化的能力。比如，移动支付 APP 可适应不同手机操作系统（如 iOS 和 Android）及各种屏幕分辨率。</li><li><strong>可维护性</strong>：对系统进行修改、修复和优化的难易程度。比如，采用模块化设计，当某个支付功能出现问题时，开发人员可快速定位并修复。</li><li><strong>国际化</strong>：系统支持不同语言、文化和地区的能力。比如，支持多种语言，满足不同国家和地区用户使用。</li><li><strong>可配置性</strong>：系统能够根据不同需求进行灵活配置的特性。比如，商家可根据自身需求配置支付方式、优惠活动等。</li></ul><p>在系统开发全生命周期，尤其是维护和升级阶段，考虑可支持性因素，降低维护成本，提高系统适应性。适用于版本更新、系统迁移等场景。</p><h3 id="辅助因素"><a href="#辅助因素" class="headerlink" title="辅助因素"></a>辅助因素</h3><p>其他的一些辅助因素也要考虑。如实现（涉及技术选型和实现细节）、接口（系统与外部系统交互的规范）、操作（系统运行的操作流程和环境要求）、包装（产品发布的包装形式，如安装包）、授权（使用系统的权限管理）等，用于更全面地描述系统需求。</p><p>在系统开发的各个阶段，从技术实现到产品发布，都需考虑这些辅助因素，确保系统完整、合规且符合项目要求。辅助因素的需求对于技术选型、项目管理等场景非常有用。</p><p>综上所述，不同的用户需求层次划分范式从不同维度对需求进行分类和分析，在软件开发的各个阶段都具有重要指导意义。项目团队应根据实际情况，灵活运用这些范式，全面、准确地把握用户需求，打造出高质量的软件产品。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件设计中输入设计的七大关键原则：系统分析师的必备指南</title>
      <link href="/2025/09/03/10-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%AD%E8%BE%93%E5%85%A5%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E5%85%B3%E9%94%AE%E5%8E%9F%E5%88%99%EF%BC%9A%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E7%9A%84%E5%BF%85%E5%A4%87%E6%8C%87%E5%8D%97/"/>
      <url>/2025/09/03/10-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E4%B8%AD%E8%BE%93%E5%85%A5%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%83%E5%A4%A7%E5%85%B3%E9%94%AE%E5%8E%9F%E5%88%99%EF%BC%9A%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E7%9A%84%E5%BF%85%E5%A4%87%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>在软件设计领域，输入设计如同大厦的基石，虽看似基础，却深刻影响着整个软件系统的稳定性、可用性与安全性。对于系统分析师而言，精准把握输入设计原则，是打造卓越软件产品的关键所在。接下来，让我们深入剖析软件输入设计需遵循的七大原则。</p><h2 id="1-确定输入数据的类型和格式"><a href="#1-确定输入数据的类型和格式" class="headerlink" title="1. 确定输入数据的类型和格式"></a>1. 确定输入数据的类型和格式</h2><p>为何要确定输入数据的类型和格式？软件系统接收的数据需被准确处理和存储，若类型与格式不明确，可能导致数据解析错误、存储异常，甚至引发系统崩溃。<br>例如在开发财务管理软件时，金额数据必须明确为数值类型，且要规定好小数位数格式，如两位小数。若不明确，用户输入类似 “100,5”（欧美习惯的千分位分隔写法），系统可能无法正确识别，导致计算错误。遵循这一原则，可以确保数据一致性与准确性，为后续数据处理、存储及业务逻辑执行提供可靠基础。</p><h2 id="2-确定输入数据的来源"><a href="#2-确定输入数据的来源" class="headerlink" title="2.确定输入数据的来源"></a>2.确定输入数据的来源</h2><p>明确输入数据来源至关重要。不同来源的数据在准确性、可靠性及安全性上存在差异。<br>以电商系统为例，用户注册信息可能来自用户手动输入，而商品库存数据或许源于仓库管理系统接口。若不清楚来源，可能将不可靠数据引入系统，比如从一个未及时更新的库存接口获取数据，导致显示库存与实际不符。<br>明确来源有助于系统分析师评估数据质量，制定相应处理策略，保证数据可靠性与适用性。</p><h2 id="3-设计良好的输入界面"><a href="#3-设计良好的输入界面" class="headerlink" title="3. 设计良好的输入界面"></a>3. 设计良好的输入界面</h2><p>良好的输入界面不可或缺。输入界面是用户与软件交互的桥梁，若设计不佳，会降低用户体验与操作效率，甚至导致用户流失。<br>以在线表单填写为例，若界面布局混乱，字段标签不清晰，必填项无明显标识，用户在注册或提交订单时会感到困惑，增加操作失误率。设计良好的输入界面，能提升用户满意度，提高数据录入效率与准确性，例如采用清晰的表单布局，合理分组字段，设置实时提示信息等。</p><h2 id="4-设计系统输入验证机制"><a href="#4-设计系统输入验证机制" class="headerlink" title="4. 设计系统输入验证机制"></a>4. 设计系统输入验证机制</h2><p>输入验证机制是软件的安全保障。用户输入可能包含错误、非法或恶意数据，若无验证机制，这些数据进入系统会破坏数据完整性、引发安全漏洞。如在登录界面，若不验证用户名和密码长度、格式，黑客可能通过输入超长字符串进行溢出攻击。设计输入验证机制，可在数据进入系统前进行过滤，确保只有合法数据被接受，有效保护系统安全与数据完整性。</p><h2 id="5-设计输入处理流程"><a href="#5-设计输入处理流程" class="headerlink" title="5. 设计输入处理流程"></a>5. 设计输入处理流程</h2><p>输入处理流程是软件的 “数据加工厂”。合理的输入处理流程能高效处理数据，将原始输入转化为符合业务需求的可用信息。<br>以图像识别软件为例，输入的原始图像需经过降噪、特征提取、分类识别等一系列处理流程。若处理流程混乱，可能导致处理时间过长、结果不准确。精心设计输入处理流程，能提高系统性能与处理效率，保障业务逻辑顺利执行。</p><h2 id="6-设计输入存储的方案"><a href="#6-设计输入存储的方案" class="headerlink" title="6. 设计输入存储的方案"></a>6. 设计输入存储的方案</h2><p>设计输入存储方案是数据管理的关键。输入数据需长期保存以备后续查询、分析与审计，若存储方案不合理，会造成数据冗余、存储效率低下、查询困难等问题。<br>如在日志管理系统中，若将大量日志数据无结构地存储，不仅占用大量空间，后期查询特定日志时也会耗费大量时间。合理的存储方案，如采用数据库分区、数据归档等技术，可优化存储结构，提高数据存储与检索效率。</p><h2 id="7-设计输入安全机制"><a href="#7-设计输入安全机制" class="headerlink" title="7. 设计输入安全机制"></a>7. 设计输入安全机制</h2><p>输入安全机制是软件的 “防护盾”。在网络环境复杂的今天，输入数据面临诸多安全威胁，如数据泄露、篡改等。以金融交易软件为例，用户输入的交易金额、账号等敏感信息若未加密传输与存储，一旦被窃取，后果不堪设想。<br>设计输入安全机制，如采用加密算法、访问控制等技术，可保护数据安全，防止敏感信息泄露与非法篡改。</p><p>在软件设计中，输入设计的这七大原则相互关联、缺一不可。从数据类型格式的精准界定，到来源的审慎确认；从输入界面的精心雕琢，到验证机制的严格把关；从处理流程的合理规划，到存储方案的科学设计，再到安全机制的严密构建。我们在进行系统设计师可以把这7个原则作为一种检查清单，逐步优化完善自己的设计。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统分析师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 认知、经验、运气与赚钱的关系</title>
      <link href="/2025/09/03/09-%E8%AE%A4%E7%9F%A5%E3%80%81%E7%BB%8F%E9%AA%8C%E3%80%81%E8%BF%90%E6%B0%94%E4%B8%8E%E8%B5%9A%E9%92%B1%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2025/09/03/09-%E8%AE%A4%E7%9F%A5%E3%80%81%E7%BB%8F%E9%AA%8C%E3%80%81%E8%BF%90%E6%B0%94%E4%B8%8E%E8%B5%9A%E9%92%B1%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>生活中，我们可能会发现，有些人明明对很多常识一窍不通，甚至是让人很无语，可是偏偏他在某些领域很成功，比如投资股票或者其他金融产品赚了很多钱，或者自己的生意做的红红火火。<br>经常听到一句话：“靠运气赚到的钱，最后都考认知亏掉了”。那么，高认知真的可以赚到钱吗？或者说认知不高就一定会亏钱吗？带着这个问题，问了AI，以下是它的回答。你认同吗？</p><h2 id="一、认知和经验有什么异同？"><a href="#一、认知和经验有什么异同？" class="headerlink" title="一、认知和经验有什么异同？"></a>一、认知和经验有什么异同？</h2><h3 id="（一）比喻解释"><a href="#（一）比喻解释" class="headerlink" title="（一）比喻解释"></a>（一）比喻解释</h3><p>如果把人比作一台电脑：</p><ul><li><strong>经验（Experience）</strong>：像是硬盘里存储的数据和已经安装的软件。通过亲身实践、重复操作、观察模仿而获得的具体知识和技能，是关于“what”（是什么）和“how”（怎么做）的。</li><li><strong>认知（Cognition）</strong>：则是这台电脑的操作系统（OS）和中央处理器（CPU）。它决定了如何处理、分析、归类和运用硬盘里的数据（经验）。认知是关于事物底层逻辑、规律和相互关系的深刻理解，是关于“why”（为什么）的。</li></ul><h3 id="（二）异同点总结"><a href="#（二）异同点总结" class="headerlink" title="（二）异同点总结"></a>（二）异同点总结</h3><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><ol><li>都来源于实践与学习：两者都不是凭空产生的，都需要通过与外部世界的互动来获得和提升。</li><li>相互促进：丰富的经验可以为认知提供素材和验证，帮助形成更深刻的认知模型。而高质量的认知可以指导人更高效地获取有价值的经验，避免重复犯错。</li></ol><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><table><thead><tr><th>特征</th><th>经验（Experience）</th><th>认知（Cognition）</th></tr></thead><tbody><tr><td>范畴</td><td>具体、领域化（Specific）</td><td>抽象、普适性（Abstract &amp; General）</td></tr><tr><td>适用范围</td><td>经验通常与特定任务或环境绑定，换个领域可能就不适用了。例如一个优秀的木匠，他的经验在编程领域几乎无用。</td><td>高水平的认知是可迁移的。比如，理解了“复利”这个认知模型，可以把它应用到投资、健康等多个领域。</td></tr></tbody></table><h2 id="二、赚钱到底是和经验强相关，还是和认知强相关，或是和运气所谓的命中注定相关？"><a href="#二、赚钱到底是和经验强相关，还是和认知强相关，或是和运气所谓的命中注定相关？" class="headerlink" title="二、赚钱到底是和经验强相关，还是和认知强相关，或是和运气所谓的命中注定相关？"></a>二、赚钱到底是和经验强相关，还是和认知强相关，或是和运气所谓的命中注定相关？</h2><h3 id="（一）三者关系"><a href="#（一）三者关系" class="headerlink" title="（一）三者关系"></a>（一）三者关系</h3><p>答案是：三者都强相关，它们共同作用，且在不同阶段、不同领域，其权重各不相同。<br>可以用一个简化的公式来理解这个关系：<br>$$<br>财富≈(认知 \times 经验)^{运气}<br>$$</p><h3 id="（二）公式解释"><a href="#（二）公式解释" class="headerlink" title="（二）公式解释"></a>（二）公式解释</h3><ol><li><strong>认知×经验（Cognition × Experience）</strong><ul><li><strong>有经验无认知（0.1×100 &#x3D; 10）</strong>：你可能是一个熟练的执行者，像一个高级技工。你能在既定的规则里把事情做得很好，赚到辛苦钱或安稳钱，但很难实现数量级的突破，也容易被时代淘汰。因为你不知道为什么要这样做，当规则改变时，你的经验就不值钱了。</li><li><strong>有认知无经验（100×0.1 &#x3D; 10）</strong>：你可能是个“纸上谈兵”的理论家。你懂很多底层逻辑，但因为缺乏实践，无法将认知落地，也抓不住具体的机会。听起来头头是道，但一做就错。</li><li><strong>认知和经验兼备（100×100 &#x3D; 10,000）</strong>：这是最强大的组合。你知道底层的“why”，也知道具体的“how”。你能洞察趋势（认知），也能动手执行（经验）。这是企业家、顶级投资人和行业领袖的特征。</li></ul></li><li><strong>运气（Luck &#x2F; Timing）</strong><ul><li><strong>当运气＞1（好运&#x2F;时代红利）</strong>：即使你的“认知×经验”的基数一般，一个巨大的时代浪潮（比如2010年的房地产、2015年的移动互联网、2020年的加密货币牛市）也能把你推到难以想象的高度。你提到的那个炒币者，很可能就是（中等偏上的领域经验 + 较低的通用认知）叠加上了巨大的运气指数。他在正确的时间，用或许并不完美的技能，踏入了一个指数级增长的市场。</li><li><strong>当运气 &#x3D; 1（不好不坏）</strong>：你的收益基本就等于你“认知×经验”的乘积，一分耕耘一分收获。这是大多数人、大多数时候的状态。</li><li><strong>当运气＜1（坏运气&#x2F;行业衰退）</strong>：即使你认知和经验都很强，但生不逢时，或者遭遇了黑天鹅事件，你的成果也会被大大压缩。比如一个非常有能力的煤炭行业专家，在新能源革命的浪潮下，他的价值就会被削弱。</li></ul></li></ol><h2 id="三、结论与反思"><a href="#三、结论与反思" class="headerlink" title="三、结论与反思"></a>三、结论与反思</h2><ol><li><strong>世界确实荒诞，但有其内在逻辑</strong>：你观察到的现象，恰恰说明单一领域的成功并不需要全方位的“高认知”。那个炒币者在“识别和相信阴谋论”上认知为零，但在“感受市场情绪并下注”这个能赚钱的技能上，他的经验和直觉（一种内隐的认知）可能超过了99％的普通人。财富系统奖励的是能产生结果的认知和经验，而不是通识知识竞赛。</li><li><strong>赚钱的本质</strong>：从根本上说，赚钱是在特定的时间点，用正确的杠杆（认知和经验的产物），做出了符合趋势（运气）**的决策。你的朋友可能无意中满足了所有条件。</li><li><strong>我们能做什么</strong>：<ul><li><strong>不要强求因果的纯粹性</strong>：不要因为看到“傻人”赚钱就否定提升认知的价值。他的成功可能无法复制，因为最大的变量“运气”已经时过境迁。而你通过提升认知，虽然不一定能抓住下一个风口，但能让你更大概率地避开陷阱，并有能力在机会来临时识别它。</li><li><strong>持续提升底层认知</strong>：这是唯一具有长期复利效应的事情。它可以帮助你在变化的世界中保持判断力。</li><li><strong>在“小领域”积累深厚经验</strong>：选择一个你看好的领域，持续投入，成为专家，让你的经验变得值钱。</li><li><strong>耐心等待，并把自己暴露在“好运气”之下</strong>：多尝试、多连接、多学习，增加你遇到好运的概率。当时代的机会来临时，你的认知和经验储备才能让你抓得住它。</li></ul></li></ol><p>最后，<strong>不必因为世界的荒诞而沮丧，看清这背后的复杂关系，然后专注于自己能掌控的部分，就是最好的答案。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 思考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认知 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文搞懂 GoF 的 23 种设计模式：从概念到代码实现</title>
      <link href="/2025/09/03/08%20%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82-GoF-%E7%9A%84-23-%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/09/03/08%20%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82-GoF-%E7%9A%84-23-%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>在程序设计领域，GoF 的 23 种设计模式堪称经典中的经典。无论是创建型、结构型还是行为型模式，每种都蕴含着解决特定编程问题的智慧。对于技术人员来说，掌握这些模式，就如同手握利刃，能在复杂的代码世界中披荆斩棘，提升代码的可维护性、可扩展性与复用性。本文将从模式名称、概念、问题、解决方案及实现代码这几个关键维度，全方位剖析这 23 种设计模式，助你快速精通，进阶为设计模式高手。</p><h2 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h2><p>创建型模式对类的实例化过程(即对象的创建过程)进行了抽象,能够使软件模块做到与 对象的创建和组织无关。创建型模式隐藏了对象是如何被创建和组合在一起的,以达到使整个  系统独立的目的。</p><p>创建型模式包括：<strong>工厂方法模式、抽象工厂模式、原型模式、单例模式和建造者模式</strong>等。</p><h3 id="1-工厂方法模式-Factory-Method"><a href="#1-工厂方法模式-Factory-Method" class="headerlink" title="1. 工厂方法模式 (Factory Method)"></a>1. 工厂方法模式 (Factory Method)</h3><ul><li><p><strong>概念</strong>：定义一个创建对象的接口，但让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p></li><li><p><strong>问题</strong>：需要创建对象，但不希望指定具体的类，以增加灵活性。</p></li><li><p><strong>解决方案</strong>：定义一个工厂方法接口，让子类实现这个方法来创建对象。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902172207359.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    String <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result of ConcreteProductA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result of ConcreteProductB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建者抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">someOperation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> factoryMethod();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Creator: &quot;</span> + product.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体创建者A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorA</span> <span class="keyword">extends</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体创建者B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreatorB</span> <span class="keyword">extends</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-抽象工厂模式-Abstract-Factory"><a href="#2-抽象工厂模式-Abstract-Factory" class="headerlink" title="2. 抽象工厂模式 (Abstract Factory)"></a>2. 抽象工厂模式 (Abstract Factory)</h3><ul><li><p><strong>概念</strong>：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p></li><li><p><strong>问题</strong>：需要创建一系列相关或依赖的对象。</p></li><li><p><strong>解决方案</strong>：定义一个抽象工厂接口，包含多个工厂方法，每个方法创建一个不同类型的对象。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902172459853.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品A</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品B</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Windows Button&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacButton</span> <span class="keyword">implements</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mac Button&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinCheckbox</span> <span class="keyword">implements</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Windows Checkbox&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacCheckbox</span> <span class="keyword">implements</span> <span class="title class_">Checkbox</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mac Checkbox&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    Button <span class="title function_">createButton</span><span class="params">()</span>;</span><br><span class="line">    Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WinButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WinCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂2</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MacFactory</span> <span class="keyword">implements</span> <span class="title class_">GUIFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Button <span class="title function_">createButton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Checkbox <span class="title function_">createCheckbox</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacCheckbox</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-原型模式-Prototype"><a href="#3-原型模式-Prototype" class="headerlink" title="3. 原型模式 (Prototype)"></a>3. 原型模式 (Prototype)</h3><ul><li><p><strong>概念</strong>：通过复制现有对象来创建新对象，而不是通过新建类的方式。</p></li><li><p><strong>问题</strong>：需要创建与现有对象类似的新对象，但希望避免重复的初始化代码。</p></li><li><p><strong>解决方案</strong>：实现一个克隆方法，返回当前对象的副本。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902172920020.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    Prototype <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体原型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcretePrototype</span><span class="params">(String name, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcretePrototype</span><span class="params">(ConcretePrototype prototype)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = prototype.name;</span><br><span class="line">        <span class="built_in">this</span>.value = prototype.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Name: &quot;</span> + name + <span class="string">&quot;, Value: &quot;</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PrototypeRegistry</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Prototype&gt; prototypes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPrototype</span><span class="params">(String key, Prototype prototype)</span> &#123;</span><br><span class="line">        prototypes.put(key, prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">getClone</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> prototypes.get(key);</span><br><span class="line">        <span class="keyword">return</span> prototype != <span class="literal">null</span> ? prototype.clone() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-单例模式-Singleton"><a href="#4-单例模式-Singleton" class="headerlink" title="4. 单例模式 (Singleton)"></a>4. 单例模式 (Singleton)</h3><ul><li><p><strong>概念</strong>：确保一个类只有一个实例，并提供一个全局访问点。</p></li><li><p><strong>问题</strong>：需要确保一个类只有一个实例，并控制对其的访问。</p></li><li><p><strong>解决方案</strong>：将构造函数私有化，提供一个静态方法获取唯一实例。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902173141293.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 线程安全的单例模式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">// volatile确保多线程环境下的可见性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 私有构造函数防止外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 双重检查锁定实现线程安全</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someBusinessLogic</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Executing business logic with value: &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举实现单例（推荐方式）</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">EnumSingleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Doing something with value: &quot;</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-建造者模式-Builder"><a href="#5-建造者模式-Builder" class="headerlink" title="5. 建造者模式 (Builder)"></a>5. 建造者模式 (Builder)</h3><ul><li><p><strong>概念</strong>：将一个复杂对象的构建与其表示分离，使得同样的构建过程可以创建不同的表示。</p></li><li><p><strong>问题</strong>：需要创建复杂对象，但构造过程可能涉及多个步骤或参数。</p></li><li><p><strong>解决方案</strong>：使用建造者类来逐步构建对象，最后返回完整对象。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902173352195.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String CPU;</span><br><span class="line">    <span class="keyword">private</span> String RAM;</span><br><span class="line">    <span class="keyword">private</span> String storage;</span><br><span class="line">    <span class="keyword">private</span> String GPU;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCPU</span><span class="params">(String CPU)</span> &#123; <span class="built_in">this</span>.CPU = CPU; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRAM</span><span class="params">(String RAM)</span> &#123; <span class="built_in">this</span>.RAM = RAM; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStorage</span><span class="params">(String storage)</span> &#123; <span class="built_in">this</span>.storage = storage; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGPU</span><span class="params">(String GPU)</span> &#123; <span class="built_in">this</span>.GPU = GPU; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer [CPU=&quot;</span> + CPU + <span class="string">&quot;, RAM=&quot;</span> + RAM + </span><br><span class="line">               <span class="string">&quot;, Storage=&quot;</span> + storage + <span class="string">&quot;, GPU=&quot;</span> + GPU + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildCPU</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildRAM</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildStorage</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildGPU</span><span class="params">()</span>;</span><br><span class="line">    Computer <span class="title function_">getComputer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GamingComputerBuilder</span> <span class="keyword">implements</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GamingComputerBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.computer = <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildCPU</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setCPU(<span class="string">&quot;Intel i9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setRAM(<span class="string">&quot;32GB DDR4&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildStorage</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setStorage(<span class="string">&quot;1TB SSD + 2TB HDD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildGPU</span><span class="params">()</span> &#123;</span><br><span class="line">        computer.setGPU(<span class="string">&quot;NVIDIA RTX 4080&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">getComputer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerDirector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">construct</span><span class="params">(ComputerBuilder builder)</span> &#123;</span><br><span class="line">        builder.buildCPU();</span><br><span class="line">        builder.buildRAM();</span><br><span class="line">        builder.buildStorage();</span><br><span class="line">        builder.buildGPU();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BuilderExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ComputerDirector</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerDirector</span>();</span><br><span class="line">        <span class="type">ComputerBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GamingComputerBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        director.construct(builder);</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> builder.getComputer();</span><br><span class="line">        </span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、结构型模式"><a href="#二、结构型模式" class="headerlink" title="二、结构型模式"></a>二、结构型模式</h2><h3 id="6-适配器模式-Adapter"><a href="#6-适配器模式-Adapter" class="headerlink" title="6. 适配器模式 (Adapter)"></a>6. 适配器模式 (Adapter)</h3><ul><li><p><strong>概念</strong>：将一个类的接口转换成客户期望的另一个接口，使接口不兼容的类可以一起工作。</p></li><li><p><strong>问题</strong>：需要使用现有的类，但其接口与需要的接口不匹配。</p></li><li><p><strong>解决方案</strong>：创建适配器类，实现目标接口并包装被适配者。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902173645669.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被适配者</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VlcPlayer</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Playing vlc file: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="comment">// 什么都不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mp4Player</span> <span class="keyword">implements</span> <span class="title class_">AdvancedMediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playVlc</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="comment">// 什么都不做</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playMp4</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Playing mp4 file: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MediaAdapter</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MediaAdapter</span><span class="params">(String audioType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>)) &#123;</span><br><span class="line">            advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">VlcPlayer</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            advancedMusicPlayer = <span class="keyword">new</span> <span class="title class_">Mp4Player</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>)) &#123;</span><br><span class="line">            advancedMusicPlayer.playVlc(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioPlayer</span> <span class="keyword">implements</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MediaAdapter mediaAdapter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String audioType, String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;mp3&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Playing mp3 file: &quot;</span> + fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">&quot;vlc&quot;</span>) || </span><br><span class="line">                   audioType.equalsIgnoreCase(<span class="string">&quot;mp4&quot;</span>)) &#123;</span><br><span class="line">            mediaAdapter = <span class="keyword">new</span> <span class="title class_">MediaAdapter</span>(audioType);</span><br><span class="line">            mediaAdapter.play(audioType, fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid media type: &quot;</span> + audioType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-桥接模式-Bridge"><a href="#7-桥接模式-Bridge" class="headerlink" title="7. 桥接模式 (Bridge)"></a>7. 桥接模式 (Bridge)</h3><ul><li><p><strong>概念</strong>：将抽象部分与其实现部分分离，使它们都可以独立地变化。</p></li><li><p><strong>问题</strong>：当一个类存在多个维度的变化时，使用继承会导致类爆炸。</p></li><li><p><strong>解决方案</strong>：使用组合代替继承，将抽象和实现分离。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902174233399.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> percent)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">on</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> on; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span> &#123; on = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span> &#123; on = <span class="literal">false</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span> &#123; <span class="keyword">return</span> volume; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> volume)</span> &#123; <span class="built_in">this</span>.volume = volume; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123; <span class="keyword">return</span> channel; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123; <span class="built_in">this</span>.channel = channel; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Radio</span> <span class="keyword">implements</span> <span class="title class_">Device</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">on</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">volume</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; <span class="keyword">return</span> on; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">()</span> &#123; on = <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disable</span><span class="params">()</span> &#123; on = <span class="literal">false</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVolume</span><span class="params">()</span> &#123; <span class="keyword">return</span> volume; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVolume</span><span class="params">(<span class="type">int</span> volume)</span> &#123; <span class="built_in">this</span>.volume = volume; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChannel</span><span class="params">()</span> &#123; <span class="keyword">return</span> channel; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChannel</span><span class="params">(<span class="type">int</span> channel)</span> &#123; <span class="built_in">this</span>.channel = channel; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象层</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Device device;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteControl</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.device = device;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">togglePower</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">volumeUp</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">volumeDown</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">channelUp</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">channelDown</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 精确抽象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicRemote</span> <span class="keyword">extends</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BasicRemote</span><span class="params">(Device device)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(device);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">togglePower</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (device.isEnabled()) &#123;</span><br><span class="line">            device.disable();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            device.enable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">volumeUp</span><span class="params">()</span> &#123;</span><br><span class="line">        device.setVolume(device.getVolume() + <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">volumeDown</span><span class="params">()</span> &#123;</span><br><span class="line">        device.setVolume(device.getVolume() - <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelUp</span><span class="params">()</span> &#123;</span><br><span class="line">        device.setChannel(device.getChannel() + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelDown</span><span class="params">()</span> &#123;</span><br><span class="line">        device.setChannel(device.getChannel() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-组合模式-Composite"><a href="#8-组合模式-Composite" class="headerlink" title="8. 组合模式 (Composite)"></a>8. 组合模式 (Composite)</h3><ul><li><p><strong>概念</strong>：将对象组合成树形结构以表示”部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p></li><li><p><strong>问题</strong>：需要处理树形结构数据，且希望对叶子节点和复合节点进行统一处理。</p></li><li><p><strong>解决方案</strong>：定义统一的组件接口，让叶子节点和复合节点都实现该接口。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902174436372.png" alt="image.png"></p></li><li><p><strong>实现代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showDetails</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span> <span class="keyword">implements</span> <span class="title class_">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> size;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">File</span><span class="params">(String name, <span class="type">long</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File: &quot;</span> + name + <span class="string">&quot; (&quot;</span> + size + <span class="string">&quot; bytes)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复合节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> <span class="keyword">implements</span> <span class="title class_">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;FileSystemComponent&gt; components = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Directory</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addComponent</span><span class="params">(FileSystemComponent component)</span> &#123;</span><br><span class="line">        components.add(component);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeComponent</span><span class="params">(FileSystemComponent component)</span> &#123;</span><br><span class="line">        components.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showDetails</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Directory: &quot;</span> + name);</span><br><span class="line">        <span class="keyword">for</span> (FileSystemComponent component : components) &#123;</span><br><span class="line">            component.showDetails();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">totalSize</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (FileSystemComponent component : components) &#123;</span><br><span class="line">            totalSize += component.getSize();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> totalSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-装饰器模式-Decorator"><a href="#9-装饰器模式-Decorator" class="headerlink" title="9. 装饰器模式 (Decorator)"></a>9. 装饰器模式 (Decorator)</h3><ul><li><p><strong>概念</strong>：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活。</p></li><li><p><strong>问题</strong>：需要在不修改现有代码的情况下，动态地给对象添加功能。</p></li><li><p><strong>解决方案</strong>：创建装饰器类，包装原始对象并提供额外的功能。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902174638850.png" alt="image.png"></p></li><li><p><strong>实现代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCoffee</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Simple coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Coffee decoratedCoffee;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decoratedCoffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedCoffee.getCost();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> decoratedCoffee.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilkDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;, with milk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SugarDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;, with sugar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WhippedCreamDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WhippedCreamDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getCost() + <span class="number">0.7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDescription() + <span class="string">&quot;, with whipped cream&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-外观模式-Facade"><a href="#10-外观模式-Facade" class="headerlink" title="10. 外观模式 (Facade)"></a>10. 外观模式 (Facade)</h3><ul><li><p><strong>概念</strong>：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p></li><li><p><strong>问题</strong>：子系统过于复杂，客户端需要与多个类交互，导致耦合度高。</p></li><li><p><strong>解决方案</strong>：创建外观类，提供简化的接口来访问子系统的功能。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902174853211.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子系统类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">freeze</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CPU freeze&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jump</span><span class="params">(<span class="type">long</span> position)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CPU jump to position: &quot;</span> + position);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CPU execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(<span class="type">long</span> position, <span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Memory load at position: &quot;</span> + position);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HardDrive</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] read(<span class="type">long</span> lba, <span class="type">int</span> size) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HardDrive read LBA: &quot;</span> + lba + <span class="string">&quot;, size: &quot;</span> + size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerFacade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CPU processor;</span><br><span class="line">    <span class="keyword">private</span> Memory ram;</span><br><span class="line">    <span class="keyword">private</span> HardDrive hd;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BOOT_ADDRESS</span> <span class="operator">=</span> <span class="number">0x0000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BOOT_SECTOR</span> <span class="operator">=</span> <span class="number">0x0000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SECTOR_SIZE</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processor = <span class="keyword">new</span> <span class="title class_">CPU</span>();</span><br><span class="line">        <span class="built_in">this</span>.ram = <span class="keyword">new</span> <span class="title class_">Memory</span>();</span><br><span class="line">        <span class="built_in">this</span>.hd = <span class="keyword">new</span> <span class="title class_">HardDrive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        processor.freeze();</span><br><span class="line">        ram.load(BOOT_ADDRESS, hd.read(BOOT_SECTOR, SECTOR_SIZE));</span><br><span class="line">        processor.jump(BOOT_ADDRESS);</span><br><span class="line">        processor.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ComputerFacade</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerFacade</span>();</span><br><span class="line">        computer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-享元模式-Flyweight"><a href="#11-享元模式-Flyweight" class="headerlink" title="11. 享元模式 (Flyweight)"></a>11. 享元模式 (Flyweight)</h3><ul><li><p><strong>概念</strong>：运用共享技术有效地支持大量细粒度的对象。</p></li><li><p><strong>问题</strong>：需要创建大量相似对象，导致内存占用过高。</p></li><li><p><strong>解决方案</strong>：将对象的内部状态（不变部分）和外部状态（可变部分）分离，共享内部状态。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902174956157.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 享元接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String color)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体享元</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String color; <span class="comment">// 内部状态</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = <span class="string">&quot;Circle&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String borderColor)</span> &#123; <span class="comment">// 外部状态作为参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Drawing &quot;</span> + type + <span class="string">&quot; of color &quot;</span> + color + </span><br><span class="line">                          <span class="string">&quot; at (&quot;</span> + x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;) with border &quot;</span> + borderColor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元工厂</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Shape&gt; circleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getCircle</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) circleMap.get(color);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (circle == <span class="literal">null</span>) &#123;</span><br><span class="line">            circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(color);</span><br><span class="line">            circleMap.put(color, circle);</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating circle of color: &quot;</span> + color);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> circle;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getTotalObjects</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> circleMap.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyweightPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] colors = &#123;<span class="string">&quot;Red&quot;</span>, <span class="string">&quot;Green&quot;</span>, <span class="string">&quot;Blue&quot;</span>, <span class="string">&quot;White&quot;</span>, <span class="string">&quot;Black&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; ++i) &#123;</span><br><span class="line">            <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) ShapeFactory.getCircle(getRandomColor());</span><br><span class="line">            circle.draw(getRandomX(), getRandomY(), getRandomBorderColor());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Total circle objects created: &quot;</span> + </span><br><span class="line">                          ShapeFactory.getTotalObjects());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRandomColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colors[(<span class="type">int</span>)(Math.random() * colors.length)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandomY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)(Math.random() * <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getRandomBorderColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colors[(<span class="type">int</span>)(Math.random() * colors.length)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-代理模式-Proxy"><a href="#12-代理模式-Proxy" class="headerlink" title="12. 代理模式 (Proxy)"></a>12. 代理模式 (Proxy)</h3><ul><li><p><strong>概念</strong>：为其他对象提供一种代理以控制对这个对象的访问。</p></li><li><p><strong>问题</strong>：需要控制对某个对象的访问，或者在访问对象时添加额外功能。</p></li><li><p><strong>解决方案</strong>：创建代理类，实现与真实对象相同的接口，并在代理类中控制对真实对象的访问。</p></li><li><p><strong>UML图</strong>：</p></li></ul><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175038797.png" alt="image.png"></p><ul><li><strong>实现代码</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">getFileName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实主题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RealImage</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        loadFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loadFromDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Loading image: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying image: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyImage</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyImage</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage.display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚拟代理（延迟加载）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LazyImageLoader</span> <span class="keyword">implements</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LazyImageLoader</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Placeholder for image: &quot;</span> + fileName);</span><br><span class="line">            <span class="comment">// 实际加载可以延迟到真正需要时</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            realImage.display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage == <span class="literal">null</span>) &#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">RealImage</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保护代理</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ProtectedImage</span> <span class="keyword">extends</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProtectedRealImage</span> <span class="keyword">implements</span> <span class="title class_">ProtectedImage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProtectedRealImage</span><span class="params">(String fileName, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying protected image: &quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String inputPassword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password.equals(inputPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ImageProxy</span> <span class="keyword">implements</span> <span class="title class_">ProtectedImage</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ProtectedRealImage realImage;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImageProxy</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (realImage != <span class="literal">null</span>) &#123;</span><br><span class="line">            realImage.display();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Access denied. Please authenticate first.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 在实际应用中，这里会有更复杂的认证逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;secret&quot;</span>.equals(password)) &#123;</span><br><span class="line">            realImage = <span class="keyword">new</span> <span class="title class_">ProtectedRealImage</span>(fileName, password);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h2><h3 id="13-职责链模式-Chain-of-Responsibility"><a href="#13-职责链模式-Chain-of-Responsibility" class="headerlink" title="13. 职责链模式 (Chain of Responsibility)"></a>13. 职责链模式 (Chain of Responsibility)</h3><ul><li><p><strong>概念</strong>：避免请求发送者与接收者耦合在一起，让多个对象都有机会处理请求，将这些对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。</p></li><li><p><strong>问题</strong>：需要让多个对象都有机会处理请求，但不明确指定接收者。</p></li><li><p><strong>解决方案</strong>：创建处理者链，每个处理者决定是否处理请求或传递给下一个处理者。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175512611.png" alt="image.png"><br><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PurchaseRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> amount;</span><br><span class="line">    <span class="keyword">private</span> String purpose;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PurchaseRequest</span><span class="params">(<span class="type">double</span> amount, String purpose)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.amount = amount;</span><br><span class="line">        <span class="built_in">this</span>.purpose = purpose;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAmount</span><span class="params">()</span> &#123; <span class="keyword">return</span> amount; &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPurpose</span><span class="params">()</span> &#123; <span class="keyword">return</span> purpose; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理者抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Approver successor;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Approver</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuccessor</span><span class="params">(Approver successor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successor = successor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(PurchaseRequest request)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Director</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">APPROVAL_LIMIT</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getAmount() &lt; APPROVAL_LIMIT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Director &quot;</span> + name + <span class="string">&quot; approved request #&quot;</span> + </span><br><span class="line">                             request.getAmount() + <span class="string">&quot; for &quot;</span> + request.getPurpose());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="literal">null</span>) &#123;</span><br><span class="line">            successor.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VicePresident</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">APPROVAL_LIMIT</span> <span class="operator">=</span> <span class="number">25000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VicePresident</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getAmount() &lt; APPROVAL_LIMIT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;VicePresident &quot;</span> + name + <span class="string">&quot; approved request #&quot;</span> + </span><br><span class="line">                             request.getAmount() + <span class="string">&quot; for &quot;</span> + request.getPurpose());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="literal">null</span>) &#123;</span><br><span class="line">            successor.processRequest(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">President</span> <span class="keyword">extends</span> <span class="title class_">Approver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">APPROVAL_LIMIT</span> <span class="operator">=</span> <span class="number">50000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">President</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(PurchaseRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getAmount() &lt; APPROVAL_LIMIT) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;President &quot;</span> + name + <span class="string">&quot; approved request #&quot;</span> + </span><br><span class="line">                             request.getAmount() + <span class="string">&quot; for &quot;</span> + request.getPurpose());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Request #&quot;</span> + request.getAmount() + </span><br><span class="line">                             <span class="string">&quot; requires board meeting approval!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-命令模式-Command"><a href="#14-命令模式-Command" class="headerlink" title="14. 命令模式 (Command)"></a>14. 命令模式 (Command)</h3><ul><li><p><strong>概念</strong>：将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></li><li><p><strong>问题</strong>：需要将请求发送者和接收者解耦，支持请求的排队、记录、撤销等操作。</p></li><li><p><strong>解决方案</strong>：将请求封装为命令对象，包含执行操作的所有信息。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175555767.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String location;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Light</span><span class="params">(String location)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.location = location;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(location + <span class="string">&quot; light is ON&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(location + <span class="string">&quot; light is OFF&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOnCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOnCommand</span><span class="params">(Light light)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LightOffCommand</span><span class="params">(Light light)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undo</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command[] onCommands;</span><br><span class="line">    <span class="keyword">private</span> Command[] offCommands;</span><br><span class="line">    <span class="keyword">private</span> Command undoCommand;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteControl</span><span class="params">()</span> &#123;</span><br><span class="line">        onCommands = <span class="keyword">new</span> <span class="title class_">Command</span>[<span class="number">7</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> <span class="title class_">Command</span>[<span class="number">7</span>];</span><br><span class="line">        undoCommand = <span class="keyword">new</span> <span class="title class_">NoCommand</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> <span class="title class_">NoCommand</span>();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> <span class="title class_">NoCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(<span class="type">int</span> slot, Command onCommand, Command offCommand)</span> &#123;</span><br><span class="line">        onCommands[slot] = onCommand;</span><br><span class="line">        offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onButtonWasPushed</span><span class="params">(<span class="type">int</span> slot)</span> &#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">        undoCommand = onCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">offButtonWasPushed</span><span class="params">(<span class="type">int</span> slot)</span> &#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">        undoCommand = offCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undoButtonWasPushed</span><span class="params">()</span> &#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-解释器模式-Interpreter"><a href="#15-解释器模式-Interpreter" class="headerlink" title="15. 解释器模式 (Interpreter)"></a>15. 解释器模式 (Interpreter)</h3><ul><li><p><strong>概念</strong>：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p></li><li><p><strong>问题</strong>：需要解释特定领域语言的句子或表达式。</p></li><li><p><strong>解决方案</strong>：定义语法的类层次结构，并实现解释操作。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175639289.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; variables = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVariable</span><span class="params">(String variable, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        variables.put(variable, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVariable</span><span class="params">(String variable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> variables.getOrDefault(variable, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Variable</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Variable</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getVariable(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Number</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Add</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) + right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subtract</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Subtract</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) - right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Multiply</span> <span class="keyword">implements</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Multiply</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) * right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExpressionParser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title function_">parse</span><span class="params">(String expression)</span> &#123;</span><br><span class="line">        Stack&lt;Expression&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        String[] tokens = expression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isOperator(token)) &#123;</span><br><span class="line">                <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        stack.push(<span class="keyword">new</span> <span class="title class_">Add</span>(left, right));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        stack.push(<span class="keyword">new</span> <span class="title class_">Subtract</span>(left, right));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        stack.push(<span class="keyword">new</span> <span class="title class_">Multiply</span>(left, right));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (Character.isDigit(token.charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">Number</span>(Integer.parseInt(token)));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">Variable</span>(token));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isOperator</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token.equals(<span class="string">&quot;+&quot;</span>) || token.equals(<span class="string">&quot;-&quot;</span>) || token.equals(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-迭代器模式-Iterator"><a href="#16-迭代器模式-Iterator" class="headerlink" title="16. 迭代器模式 (Iterator)"></a>16. 迭代器模式 (Iterator)</h3><ul><li><p><strong>概念</strong>：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p></li><li><p><strong>问题</strong>：需要遍历聚合对象而不暴露其内部结构。</p></li><li><p><strong>解决方案</strong>：定义迭代器接口，提供遍历方法。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175715869.png" alt="image.png"><br><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">    Iterator&lt;T&gt; <span class="title function_">getIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体聚合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameRepository</span> <span class="keyword">implements</span> <span class="title class_">Container</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String[] names = &#123;<span class="string">&quot;Robert&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Julie&quot;</span>, <span class="string">&quot;Lora&quot;</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;String&gt; <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NameIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NameIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;String&gt; &#123;</span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; names.length;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> names[index++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用迭代器实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayIterator</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayIterator</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; array.length &amp;&amp; array[position] != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasNext()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[position++];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="17-中介者模式-Mediator"><a href="#17-中介者模式-Mediator" class="headerlink" title="17. 中介者模式 (Mediator)"></a>17. 中介者模式 (Mediator)</h3><ul><li><p><strong>概念</strong>：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p></li><li><p><strong>问题</strong>：对象之间存在复杂的引用关系，导致系统结构复杂且难以复用。</p></li><li><p><strong>解决方案</strong>：引入中介者来协调对象之间的交互。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175755476.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中介者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ChatMediator</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String msg, User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体中介者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoom</span> <span class="keyword">implements</span> <span class="title class_">ChatMediator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; users;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChatRoom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String msg, User user)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (User u : users) &#123;</span><br><span class="line">            <span class="comment">// 消息不应该发送给发送者自己</span></span><br><span class="line">            <span class="keyword">if</span> (u != user) &#123;</span><br><span class="line">                u.receive(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同事类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ChatMediator mediator;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(ChatMediator med, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator = med;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String msg)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体同事类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BasicUser</span><span class="params">(ChatMediator med, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(med, name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; sends: &quot;</span> + msg);</span><br><span class="line">        mediator.sendMessage(msg, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; receives: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PremiumUser</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PremiumUser</span><span class="params">(ChatMediator med, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(med, name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; sends: &quot;</span> + msg);</span><br><span class="line">        mediator.sendMessage(msg, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot; receives: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-备忘录模式-Memento"><a href="#18-备忘录模式-Memento" class="headerlink" title="18. 备忘录模式 (Memento)"></a>18. 备忘录模式 (Memento)</h3><ul><li><p><strong>概念</strong>：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后恢复对象到原先保存的状态。</p></li><li><p><strong>问题</strong>：需要保存对象状态并在以后恢复，但不希望暴露对象内部细节。</p></li><li><p><strong>解决方案</strong>：创建备忘录类来保存状态，由原发器管理备忘录。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902175909231.png" alt="image.png"><br><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Memento</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原发器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">        System.out.println(<span class="string">&quot;State set to: &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">saveStateToMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(state);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getStateFromMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        state = memento.getState();</span><br><span class="line">        System.out.println(<span class="string">&quot;State restored to: &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CareTaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Memento state)</span> &#123;</span><br><span class="line">        mementoList.add(state);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本编辑器示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">StringBuilder</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">private</span> TextEditorMemento lastSavedState;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.text.append(text);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getText</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> text.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> TextEditorMemento <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextEditorMemento</span>(text.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restore</span><span class="params">(TextEditorMemento memento)</span> &#123;</span><br><span class="line">        text = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(memento.getSavedText());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部备忘录类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TextEditorMemento</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String text;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">TextEditorMemento</span><span class="params">(String text)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.text = text;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> String <span class="title function_">getSavedText</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-观察者模式-Observer"><a href="#19-观察者模式-Observer" class="headerlink" title="19. 观察者模式 (Observer)"></a>19. 观察者模式 (Observer)</h3><ul><li><p><strong>概念</strong>：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p></li><li><p><strong>问题</strong>：需要实现对象之间的动态依赖关系，当一个对象状态改变时，其他相关对象能够自动更新。</p></li><li><p><strong>解决方案</strong>：定义主题和观察者接口，主题维护观察者列表并在状态改变时通知它们。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902180018356.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主题接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示元素接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DisplayElement</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体主题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherData</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeatherData</span><span class="params">()</span> &#123;</span><br><span class="line">        observers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">measurementsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体观察者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> Subject weatherData;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CurrentConditionsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weatherData = weatherData;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Current conditions: &quot;</span> + temperature + </span><br><span class="line">                         <span class="string">&quot;°C and &quot;</span> + humidity + <span class="string">&quot;% humidity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>, DisplayElement &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">maxTemp</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">minTemp</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> <span class="variable">tempSum</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numReadings;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StatisticsDisplay</span><span class="params">(Subject weatherData)</span> &#123;</span><br><span class="line">        weatherData.registerObserver(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        tempSum += temperature;</span><br><span class="line">        numReadings++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temperature &gt; maxTemp) &#123;</span><br><span class="line">            maxTemp = temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (temperature &lt; minTemp) &#123;</span><br><span class="line">            minTemp = temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Avg/Max/Min temperature = &quot;</span> + (tempSum / numReadings) +</span><br><span class="line">                         <span class="string">&quot;/&quot;</span> + maxTemp + <span class="string">&quot;/&quot;</span> + minTemp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Java内置的Observable类（已过时，但为了完整性展示）</span></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherDataObservable</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> pressure;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">measurementsChanged</span><span class="params">()</span> &#123;</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMeasurements</span><span class="params">(<span class="type">float</span> temperature, <span class="type">float</span> humidity, <span class="type">float</span> pressure)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        measurementsChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getTemperature</span><span class="params">()</span> &#123; <span class="keyword">return</span> temperature; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getHumidity</span><span class="params">()</span> &#123; <span class="keyword">return</span> humidity; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPressure</span><span class="params">()</span> &#123; <span class="keyword">return</span> pressure; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-状态模式-State"><a href="#20-状态模式-State" class="headerlink" title="20. 状态模式 (State)"></a>20. 状态模式 (State)</h3><ul><li><p><strong>概念</strong>：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></li><li><p><strong>问题</strong>：对象的行为依赖于它的状态，并且必须在运行时根据状态改变行为。</p></li><li><p><strong>解决方案</strong>：将状态封装为独立的类，并将行为委托给当前状态对象。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902180104179.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NoQuarterState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You inserted a quarter&quot;</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getHasQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You haven&#x27;t inserted a quarter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You turned, but there&#x27;s no quarter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You need to pay first&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HasQuarterState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HasQuarterState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You can&#x27;t insert another quarter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Quarter returned&quot;</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;You turned...&quot;</span>);</span><br><span class="line">        gumballMachine.setState(gumballMachine.getSoldState());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;No gumball dispensed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoldState</span> <span class="keyword">implements</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GumballMachine gumballMachine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SoldState</span><span class="params">(GumballMachine gumballMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gumballMachine = gumballMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Please wait, we&#x27;re already giving you a gumball&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorry, you already turned the crank&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Turning twice doesn&#x27;t get you another gumball!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispense</span><span class="params">()</span> &#123;</span><br><span class="line">        gumballMachine.releaseBall();</span><br><span class="line">        <span class="keyword">if</span> (gumballMachine.getCount() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            gumballMachine.setState(gumballMachine.getNoQuarterState());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Oops, out of gumballs!&quot;</span>);</span><br><span class="line">            gumballMachine.setState(gumballMachine.getSoldOutState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GumballMachine</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> State soldOutState;</span><br><span class="line">    <span class="keyword">private</span> State noQuarterState;</span><br><span class="line">    <span class="keyword">private</span> State hasQuarterState;</span><br><span class="line">    <span class="keyword">private</span> State soldState;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GumballMachine</span><span class="params">(<span class="type">int</span> numberGumballs)</span> &#123;</span><br><span class="line">        soldOutState = <span class="keyword">new</span> <span class="title class_">SoldOutState</span>(<span class="built_in">this</span>);</span><br><span class="line">        noQuarterState = <span class="keyword">new</span> <span class="title class_">NoQuarterState</span>(<span class="built_in">this</span>);</span><br><span class="line">        hasQuarterState = <span class="keyword">new</span> <span class="title class_">HasQuarterState</span>(<span class="built_in">this</span>);</span><br><span class="line">        soldState = <span class="keyword">new</span> <span class="title class_">SoldState</span>(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.count = numberGumballs;</span><br><span class="line">        <span class="keyword">if</span> (numberGumballs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            state = noQuarterState;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            state = soldOutState;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        state.insertQuarter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ejectQuarter</span><span class="params">()</span> &#123;</span><br><span class="line">        state.ejectQuarter();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">turnCrank</span><span class="params">()</span> &#123;</span><br><span class="line">        state.turnCrank();</span><br><span class="line">        state.dispense();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">releaseBall</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A gumball comes rolling out the slot...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            count = count - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Getter methods for states</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getSoldOutState</span><span class="params">()</span> &#123; <span class="keyword">return</span> soldOutState; &#125;</span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getNoQuarterState</span><span class="params">()</span> &#123; <span class="keyword">return</span> noQuarterState; &#125;</span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getHasQuarterState</span><span class="params">()</span> &#123; <span class="keyword">return</span> hasQuarterState; &#125;</span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getSoldState</span><span class="params">()</span> &#123; <span class="keyword">return</span> soldState; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123; <span class="keyword">return</span> count; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="21-策略模式-Strategy"><a href="#21-策略模式-Strategy" class="headerlink" title="21. 策略模式 (Strategy)"></a>21. 策略模式 (Strategy)</h3><ul><li><p><strong>概念</strong>：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。策略模式使得算法可独立于使用它的客户而变化。</p></li><li><p><strong>问题</strong>：需要在运行时选择不同的算法或行为。</p></li><li><p><strong>解决方案</strong>：定义策略接口，将每个算法封装为独立的策略类。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902180145003.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体策略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String cardNumber;</span><br><span class="line">    <span class="keyword">private</span> String cvv;</span><br><span class="line">    <span class="keyword">private</span> String dateOfExpiry;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditCardStrategy</span><span class="params">(String name, String cardNumber, String cvv, String dateOfExpiry)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.cardNumber = cardNumber;</span><br><span class="line">        <span class="built_in">this</span>.cvv = cvv;</span><br><span class="line">        <span class="built_in">this</span>.dateOfExpiry = dateOfExpiry;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(amount + <span class="string">&quot; paid with credit/debit card&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayPalStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String emailId;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PayPalStrategy</span><span class="params">(String emailId, String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emailId = emailId;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(amount + <span class="string">&quot; paid using PayPal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CryptoStrategy</span> <span class="keyword">implements</span> <span class="title class_">PaymentStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String walletAddress;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CryptoStrategy</span><span class="params">(String walletAddress)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.walletAddress = walletAddress;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        System.out.println(amount + <span class="string">&quot; paid with cryptocurrency&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingCart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Item&gt; items;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingCart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addItem</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        items.add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeItem</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        items.remove(item);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculateTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">            sum += item.getPrice();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">(PaymentStrategy paymentMethod)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> calculateTotal();</span><br><span class="line">        paymentMethod.pay(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String upcCode;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Item</span><span class="params">(String upcCode, <span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.upcCode = upcCode;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUpcCode</span><span class="params">()</span> &#123; <span class="keyword">return</span> upcCode; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123; <span class="keyword">return</span> price; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序策略示例</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BubbleSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorting using bubble sort&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现冒泡排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuickSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorting using quick sort&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现快速排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MergeSortStrategy</span> <span class="keyword">implements</span> <span class="title class_">SortStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sorting using merge sort&quot;</span>);</span><br><span class="line">        <span class="comment">// 实现归并排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sorter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SortStrategy strategy;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(SortStrategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        strategy.sort(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-模板方法模式-Template-Method"><a href="#22-模板方法模式-Template-Method" class="headerlink" title="22. 模板方法模式 (Template Method)"></a>22. 模板方法模式 (Template Method)</h3><ul><li><p><strong>概念</strong>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></li><li><p><strong>问题</strong>：有多个类包含相同的算法，但某些步骤的实现不同。</p></li><li><p><strong>解决方案</strong>：在抽象类中定义模板方法，将可变步骤声明为抽象方法。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902180233742.png" alt="image.png"></p></li><li><p><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DataProcessor</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        readData();</span><br><span class="line">        processData();</span><br><span class="line">        writeData();</span><br><span class="line">        <span class="keyword">if</span> (needValidation()) &#123;</span><br><span class="line">            validateData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 具体方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Reading data from source...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Writing data to destination...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 抽象方法（必须由子类实现）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 钩子方法（可选重写）</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needValidation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Validating data...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CSVDataProcessor</span> <span class="keyword">extends</span> <span class="title class_">DataProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing CSV data...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needValidation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">validateData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Validating CSV data format...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XMLDataProcessor</span> <span class="keyword">extends</span> <span class="title class_">DataProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing XML data...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONDataProcessor</span> <span class="keyword">extends</span> <span class="title class_">DataProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Processing JSON data...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">needValidation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 饮料制作示例</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">prepareRecipe</span><span class="params">()</span> &#123;</span><br><span class="line">        boilWater();</span><br><span class="line">        brew();</span><br><span class="line">        pourInCup();</span><br><span class="line">        <span class="keyword">if</span> (customerWantsCondiments()) &#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">boilWater</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Boiling water&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">pourInCup</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Pouring into cup&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 钩子方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">customerWantsCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dripping coffee through filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding sugar and milk&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">customerWantsCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 可以通过用户输入决定是否添加调料</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">brew</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Steeping the tea&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addCondiments</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding lemon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="23-访问者模式-Visitor"><a href="#23-访问者模式-Visitor" class="headerlink" title="23. 访问者模式 (Visitor)"></a>23. 访问者模式 (Visitor)</h3><ul><li><p><strong>概念</strong>：表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p></li><li><p><strong>问题</strong>：需要在不同对象上执行不同的操作，但不希望修改这些对象的类。</p></li><li><p><strong>解决方案</strong>：将操作封装在访问者对象中，对象接受访问者并调用相应方法。</p></li><li><p><strong>UML图</strong>：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250902180312958.png" alt="image.png"><br><strong>实现代码</strong>：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Keyboard</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Keyboard&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monitor</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Monitor&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mouse&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> <span class="keyword">implements</span> <span class="title class_">ComputerPart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ComputerPart&gt; parts;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">()</span> &#123;</span><br><span class="line">        parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        parts.add(<span class="keyword">new</span> <span class="title class_">Mouse</span>());</span><br><span class="line">        parts.add(<span class="keyword">new</span> <span class="title class_">Keyboard</span>());</span><br><span class="line">        parts.add(<span class="keyword">new</span> <span class="title class_">Monitor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ComputerPart part : parts) &#123;</span><br><span class="line">            part.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ComputerPartVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Computer computer)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Mouse mouse)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Keyboard keyboard)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Monitor monitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerPartDisplayVisitor</span> <span class="keyword">implements</span> <span class="title class_">ComputerPartVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Computer computer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Computer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Keyboard keyboard)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Displaying Monitor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerPartMaintenanceVisitor</span> <span class="keyword">implements</span> <span class="title class_">ComputerPartVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Computer computer)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Maintaining Computer&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cleaning Mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Keyboard keyboard)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cleaning Keyboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Monitor monitor)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Calibrating Monitor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectStructure</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;ComputerPart&gt; parts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addPart</span><span class="params">(ComputerPart part)</span> &#123;</span><br><span class="line">        parts.add(part);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ComputerPartVisitor visitor)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ComputerPart part : parts) &#123;</span><br><span class="line">            part.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorPatternDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">ComputerPartVisitor</span> <span class="variable">displayVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerPartDisplayVisitor</span>();</span><br><span class="line">        <span class="type">ComputerPartVisitor</span> <span class="variable">maintenanceVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerPartMaintenanceVisitor</span>();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;=== Displaying Computer Parts ===&quot;</span>);</span><br><span class="line">        computer.accept(displayVisitor);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;\n=== Maintaining Computer Parts ===&quot;</span>);</span><br><span class="line">        computer.accept(maintenanceVisitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>GoF的23种设计模式为我们提供了解决常见软件设计问题的经典方案。通过合理运用这些模式，我们可以：</p><ol><li><strong>提高代码的可维护性和可扩展性</strong></li><li><strong>降低模块间的耦合度</strong></li><li><strong>增强代码的复用性</strong></li><li><strong>使系统更加灵活和易于理解</strong></li></ol><p>每种模式都有其适用的场景，在实际开发中应该根据具体需求选择合适的设计模式，而不是为了使用模式而使用模式。希望这篇博客能帮助您更好地理解和应用这些经典的设计模式。</p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统分析师必看！OOD 六大设计原则拆解，附 Java 代码示例（从概念到落地一次搞懂）</title>
      <link href="/2025/09/02/07-%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E5%BF%85%E7%9C%8B%EF%BC%81OOD-%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%8B%86%E8%A7%A3%EF%BC%8C%E9%99%84-Java-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E8%90%BD%E5%9C%B0%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%EF%BC%89/"/>
      <url>/2025/09/02/07-%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E5%B8%88%E5%BF%85%E7%9C%8B%EF%BC%81OOD-%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E6%8B%86%E8%A7%A3%EF%BC%8C%E9%99%84-Java-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%EF%BC%88%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E8%90%BD%E5%9C%B0%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>作为一名常年和系统设计打交道的开发者，每次都会被 OOD（面向对象设计）的六大原则戳中 —— 这六条看似抽象的规则，其实是避开 “代码越写越烂” 陷阱的核心心法。</p><p>很多人刚接触时会觉得 “这些原则太理论，实际开发用不上”，但只要真正理解并落地，你会发现代码的扩展性、可维护性会发生质的变化。今天就用大白话拆解这六大原则，每个原则都配了 Java 代码示例，从概念到实践一步到位，新手也能看懂。</p><h2 id="一、开闭原则：对扩展开放，对修改关闭"><a href="#一、开闭原则：对扩展开放，对修改关闭" class="headerlink" title="一、开闭原则：对扩展开放，对修改关闭"></a>一、开闭原则：对扩展开放，对修改关闭</h2><p><strong>核心概念</strong>：这是 OOD 原则的 “老大”，核心思想是 —— 当需要给系统新增功能时，尽量通过 “扩展已有代码” 实现，而不是 “修改已有代码”。这样能避免改动旧代码时，不小心引入新 Bug，也能让系统更稳定。</p><p>举个例子：比如你开发了一个电商系统的 “订单折扣” 功能，初期只有 “会员折扣”，后来要加 “节日折扣”，如果一开始就遵循开闭原则，就不用改原来的会员折扣代码，直接加个新的折扣类就行。</p><p>下面给出一个示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先定义一个抽象的折扣接口（稳定的抽象层）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">    <span class="comment">// 计算折扣后的价格</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculateDiscount</span><span class="params">(<span class="type">double</span> originalPrice)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 会员折扣实现类（已有的功能，无需修改）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberDiscount</span> <span class="keyword">implements</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateDiscount</span><span class="params">(<span class="type">double</span> originalPrice)</span> &#123;</span><br><span class="line">        <span class="comment">// 会员打9折</span></span><br><span class="line">        <span class="keyword">return</span> originalPrice * <span class="number">0.9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 新增节日折扣（扩展新类，不修改旧代码）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HolidayDiscount</span> <span class="keyword">implements</span> <span class="title class_">Discount</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateDiscount</span><span class="params">(<span class="type">double</span> originalPrice)</span> &#123;</span><br><span class="line">        <span class="comment">// 节日打8折</span></span><br><span class="line">        <span class="keyword">return</span> originalPrice * <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 订单服务（依赖抽象接口，而非具体实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="comment">// 接收 Discount 接口，不管是哪种折扣，这里都不用改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateFinalPrice</span><span class="params">(<span class="type">double</span> originalPrice, Discount discount)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> discount.calculateDiscount(originalPrice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：新增功能时，直接传新的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OrderService</span> <span class="variable">orderService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderService</span>();</span><br><span class="line">        <span class="type">double</span> <span class="variable">originalPrice</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 会员订单</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">memberPrice</span> <span class="operator">=</span> orderService.calculateFinalPrice(originalPrice, <span class="keyword">new</span> <span class="title class_">MemberDiscount</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;会员价：&quot;</span> + memberPrice); <span class="comment">// 输出 90.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 节日订单（新增功能，旧代码没动）</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">holidayPrice</span> <span class="operator">=</span> orderService.calculateFinalPrice(originalPrice, <span class="keyword">new</span> <span class="title class_">HolidayDiscount</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;节日价：&quot;</span> + holidayPrice); <span class="comment">// 输出 80.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们可以看到，对于折扣这个对象我们抽象出一个接口，然后对于不同类型的折扣通过接口的实现了创建具体的类。这样一来，创建订单时，我们只要区分现在要用的折扣是哪个类型的就可以了。以后要新增一个折扣类型（比如“618折扣”）只要扩展Discount这个接口就行了。</p><h2 id="二、里氏替换原则：子类能无缝替代父类，且不破坏程序逻辑"><a href="#二、里氏替换原则：子类能无缝替代父类，且不破坏程序逻辑" class="headerlink" title="二、里氏替换原则：子类能无缝替代父类，且不破坏程序逻辑"></a>二、里氏替换原则：子类能无缝替代父类，且不破坏程序逻辑</h2><p><strong>核心概念</strong>：简单说就是 “<strong>子类是父类的加强版，但不能颠覆父类的原有功能</strong>”。如果一个程序里用了父类对象，把它换成子类对象后，程序还能正常跑，这就符合里氏替换；反之如果换了之后程序崩了，那就是违反了这个原则。</p><p>最典型的反例就是 “正方形不是长方形”—— 如果把长方形的 “宽” 和 “长” 分开设置，子类正方形强制让宽 &#x3D; 长，那用子类替换父类后，修改长或宽的逻辑就会出错。</p><p>我们看下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 父类：鸟类（有“飞”的基础功能）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="comment">// 飞行速度</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> speed;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算飞行时间（基础逻辑）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateFlyTime</span><span class="params">(<span class="type">double</span> distance)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> distance / speed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置飞行速度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpeed</span><span class="params">(<span class="type">double</span> speed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.speed = speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 子类：麻雀（继承鸟类，不破坏父类逻辑）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sparrow</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="comment">// 麻雀的飞行速度有默认值，也可以通过父类方法修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sparrow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.speed = <span class="number">50</span>; <span class="comment">// 假设麻雀默认飞行速度50km/h</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 子类：老鹰（继承鸟类，扩展功能但不颠覆）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Eagle</span> <span class="keyword">extends</span> <span class="title class_">Bird</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Eagle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.speed = <span class="number">150</span>; <span class="comment">// 老鹰飞得更快</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增“俯冲”功能（扩展，不修改父类方法）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dive</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老鹰正在俯冲捕猎！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：子类替换父类，程序正常运行</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 父类对象</span></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        bird.setSpeed(<span class="number">80</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;普通鸟飞行时间：&quot;</span> + bird.calculateFlyTime(distance)); <span class="comment">// 100/80=1.25</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 子类麻雀替换父类</span></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">sparrow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sparrow</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;麻雀飞行时间：&quot;</span> + sparrow.calculateFlyTime(distance)); <span class="comment">// 100/50=2.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 子类老鹰替换父类</span></span><br><span class="line">        <span class="type">Bird</span> <span class="variable">eagle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Eagle</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;老鹰飞行时间：&quot;</span> + eagle.calculateFlyTime(distance)); <span class="comment">// 100/150≈0.666</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 老鹰还能调用自己的扩展方法</span></span><br><span class="line">        ((Eagle) eagle).dive(); <span class="comment">// 输出“老鹰正在俯冲捕猎！”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，Sparrow和Eagle都继承自Bird这个类，是Bird的“特例”，但是本质上她们都是鸟，所以都有fly这个能力。因此就算是在另一个地方把Sparrow替换成Bird，程序也不会报错，因为它没有破坏Bird的逻辑。</p><h2 id="三、依赖倒置原则：依赖抽象，不依赖具体实现"><a href="#三、依赖倒置原则：依赖抽象，不依赖具体实现" class="headerlink" title="三、依赖倒置原则：依赖抽象，不依赖具体实现"></a>三、依赖倒置原则：依赖抽象，不依赖具体实现</h2><p><strong>核心概念</strong>：这条原则<strong>其实是开闭原则的 “支撑”</strong>，核心是 “高低层模块都要依赖抽象，抽象不能依赖具体”。简单说就是 —— <strong>不要让你的代码依赖某个具体的类，而是依赖接口或抽象类，这样高层模块（比如服务类）就不会被低层模块（比如工具类）的变动影响</strong>。</p><p>比如你开发一个 “消息通知” 功能，高层模块是 “通知服务”，低层模块是 “短信通知”“邮件通知”。如果通知服务直接依赖 “短信通知” 这个具体类，后来要加 “邮件通知”，就得改通知服务的代码；但如果依赖 “通知接口”，加新功能时只需要加个接口实现类就行。</p><p>我们还是来看代码示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 抽象接口：消息通知（稳定的抽象层）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Notification</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String content)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 低层模块1：短信通知（具体实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsNotification</span> <span class="keyword">implements</span> <span class="title class_">Notification</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过短信发送：&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 低层模块2：邮件通知（新增的具体实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailNotification</span> <span class="keyword">implements</span> <span class="title class_">Notification</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过邮件发送：&quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 高层模块：通知服务（依赖抽象接口，不依赖具体实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationService</span> &#123;</span><br><span class="line">    <span class="comment">// 构造方法注入抽象接口（而非具体类）</span></span><br><span class="line">    <span class="keyword">private</span> Notification notification;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NotificationService</span><span class="params">(Notification notification)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.notification = notification;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送消息的核心逻辑（不用改）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyUser</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        notification.send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：高层模块无需修改，就能切换不同的通知方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 短信通知</span></span><br><span class="line">        <span class="type">NotificationService</span> <span class="variable">smsService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationService</span>(<span class="keyword">new</span> <span class="title class_">SmsNotification</span>());</span><br><span class="line">        smsService.notifyUser(<span class="string">&quot;您的验证码是123456&quot;</span>); <span class="comment">// 输出“通过短信发送：您的验证码是123456”</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 邮件通知（高层模块没改，只换了实现类）</span></span><br><span class="line">        <span class="type">NotificationService</span> <span class="variable">emailService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NotificationService</span>(<span class="keyword">new</span> <span class="title class_">EmailNotification</span>());</span><br><span class="line">        emailService.notifyUser(<span class="string">&quot;您有一封新邮件，请查收&quot;</span>); <span class="comment">// 输出“通过邮件发送：您有一封新邮件，请查收”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中：NotificationService 的notifyUser实际上是调用了Notification的send方法，但是由于它是一个抽象方法，具体的实现都在不同的通知类中，因此当服务方法调用时，只要指派不同的通知类即可。<br>这里的核心是NotificationService 依赖的只是 Notification 这个抽象接口，这样方便后续的扩展。假设未来如果有了新的通知类型，比如微信通知，那么创建一个WeChatNotification并实现Notification即可。</p><h2 id="四、组合-聚合原则：优先用组合-聚合，少用继承"><a href="#四、组合-聚合原则：优先用组合-聚合，少用继承" class="headerlink" title="四、组合 &#x2F; 聚合原则：优先用组合 &#x2F; 聚合，少用继承"></a>四、组合 &#x2F; 聚合原则：优先用组合 &#x2F; 聚合，少用继承</h2><p><strong>核心概念</strong>：继承的问题在于 “强耦合”—— 子类会依赖父类的实现，如果父类改了，子类可能跟着崩；而组合 &#x2F; 聚合是 “弱耦合”—— <strong>一个类通过 “包含另一个类的对象” 来使用其功能，双方可以独立变化</strong>。所以设计时要优先选组合 &#x2F; 聚合，实在适合继承（比如子类是父类的 “is-a” 关系）再用继承。</p><p>比如 “汽车” 和 “发动机” 的关系：汽车需要发动机才能跑，但汽车不是 “继承” 发动机（因为汽车不是发动机的一种），而是 “组合” 发动机（汽车里包含一个发动机对象）；而 “轿车” 和 “汽车” 是 “is-a” 关系，适合用继承。</p><p>我们来看代码的示范：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 发动机类（被组合的类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">// 发动机启动</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发动机启动，开始提供动力&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发动机停止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发动机停止，动力中断&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 汽车类（组合发动机，而非继承）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 汽车包含一个发动机对象（组合关系：汽车销毁时，发动机也跟着销毁）</span></span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法初始化发动机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.engine = <span class="keyword">new</span> <span class="title class_">Engine</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 汽车启动：调用发动机的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startCar</span><span class="params">()</span> &#123;</span><br><span class="line">        engine.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;汽车成功启动，可以行驶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 汽车停止：调用发动机的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stopCar</span><span class="params">()</span> &#123;</span><br><span class="line">        engine.stop();</span><br><span class="line">        System.out.println(<span class="string">&quot;汽车成功停止&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 轿车类（继承汽车，因为轿车是汽车的一种）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sedan</span> <span class="keyword">extends</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 轿车的特有功能：自动泊车</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoParking</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;轿车正在自动泊车&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：组合和继承的正确使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sedan</span> <span class="variable">sedan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sedan</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用继承自Car的方法（依赖组合的Engine）</span></span><br><span class="line">        sedan.startCar(); </span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// 发动机启动，开始提供动力</span></span><br><span class="line">        <span class="comment">// 汽车成功启动，可以行驶</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用Sedan的特有方法</span></span><br><span class="line">        sedan.autoParking(); <span class="comment">// 输出“轿车正在自动泊车”</span></span><br><span class="line">        </span><br><span class="line">        sedan.stopCar();</span><br><span class="line">        <span class="comment">// 输出：</span></span><br><span class="line">        <span class="comment">// 发动机停止，动力中断</span></span><br><span class="line">        <span class="comment">// 汽车成功停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、接口隔离原则：接口要小而专，不要大而全"><a href="#五、接口隔离原则：接口要小而专，不要大而全" class="headerlink" title="五、接口隔离原则：接口要小而专，不要大而全"></a>五、接口隔离原则：接口要小而专，不要大而全</h2><p><strong>核心概念</strong>：这条原则是说 —— <strong>不要设计一个 “万能接口”，把所有功能都塞进去，而是要把接口拆成多个 “专用接口”，让类只实现自己需要的接口。</strong> 这样能避免 “类实现了接口，但被迫重写不需要的方法”（比如空实现），也能减少接口变动的影响。 </p><p>比如 “用户系统” 里，普通用户只需要 “登录、注册” 功能，管理员需要 “用户管理、权限管理” 功能。如果设计一个 “UserInterface” 包含所有 4 个方法，普通用户类就得空实现 “用户管理、权限管理”，这就很不合理；拆成两个接口后，各自实现需要的方法即可。</p><p>还是来看示范代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 拆分成专用接口：普通用户接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NormalUserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>; <span class="comment">// 登录</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span>; <span class="comment">// 注册</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 拆分成专用接口：管理员接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AdminService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">manageUser</span><span class="params">(String userId)</span>; <span class="comment">// 管理用户</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">managePermission</span><span class="params">(String roleId)</span>; <span class="comment">// 管理权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 普通用户类：只实现自己需要的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalUser</span> <span class="keyword">implements</span> <span class="title class_">NormalUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 管理员类：实现管理员接口，也可以实现普通用户接口（如果需要）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Admin</span> <span class="keyword">implements</span> <span class="title class_">NormalUserService</span>, AdminService &#123;</span><br><span class="line">    <span class="comment">// 实现普通用户接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员&quot;</span> + username + <span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 管理员可能不需要注册，或有特殊逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;管理员账号需通过审批注册&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实现管理员接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">manageUser</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功管理用户：&quot;</span> + userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">managePermission</span><span class="params">(String roleId)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;成功管理角色权限：&quot;</span> + roleId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：每个类只处理自己需要的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NormalUser</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NormalUser</span>();</span><br><span class="line">        user.login(<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;123456&quot;</span>); <span class="comment">// 输出“zhangsan登录成功”</span></span><br><span class="line">        user.register(<span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;654321&quot;</span>); <span class="comment">// 输出“lisi注册成功”</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Admin</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Admin</span>();</span><br><span class="line">        admin.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin123&quot;</span>); <span class="comment">// 输出“管理员admin登录成功”</span></span><br><span class="line">        admin.manageUser(<span class="string">&quot;1001&quot;</span>); <span class="comment">// 输出“成功管理用户：1001”</span></span><br><span class="line">        admin.managePermission(<span class="string">&quot;admin_role&quot;</span>); <span class="comment">// 输出“成功管理角色权限：admin_role”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、最少知识原则：一个类只和-“直接朋友”-通信，别和-“陌生人”-说话"><a href="#六、最少知识原则：一个类只和-“直接朋友”-通信，别和-“陌生人”-说话" class="headerlink" title="六、最少知识原则：一个类只和 “直接朋友” 通信，别和 “陌生人” 说话"></a>六、最少知识原则：一个类只和 “直接朋友” 通信，别和 “陌生人” 说话</h2><p><strong>核心概念</strong>：也叫 “迪米特法则”，核心是 “降低类之间的耦合”—— <strong>一个类应该只和它的 “直接朋友”（比如成员变量、方法参数、返回值里的类）交互，不要主动去调用 “朋友的朋友” 的方法</strong>。这样能减少类之间的依赖，让系统更稳定。</p><p>比如 “老板要统计部门的员工数量”：老板的直接朋友是 “部门”，部门的直接朋友是 “员工”。如果老板直接去遍历部门里的员工列表，就是和 “员工”（陌生人）通信了；正确的做法是老板让部门自己统计人数，然后把结果返回给老板。</p><p>看下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 员工类（部门的直接朋友，老板的陌生人）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">// 员工的基本信息（不需要暴露给老板）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 部门类（老板的直接朋友，员工的直接朋友）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="comment">// 部门里有员工列表</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employees;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Department</span><span class="params">()</span> &#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 模拟添加3个员工</span></span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">28</span>));</span><br><span class="line">        employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">30</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 部门自己提供“统计人数”的方法（对外隐藏员工列表）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEmployeeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> employees.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 老板类（只和部门通信，不和员工通信）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line">    <span class="comment">// 老板统计部门人数：只调用部门的方法（直接朋友）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDepartmentEmployees</span><span class="params">(Department department)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> department.getEmployeeCount();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前部门员工数量：&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试：符合最少知识原则，耦合度低</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Boss</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boss</span>();</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 老板只和部门交互，不知道员工的存在</span></span><br><span class="line">        boss.countDepartmentEmployees(department); <span class="comment">// 输出“当前部门员工数量：3”</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后：六大原则不是-“教条”，而是-“工具”"><a href="#写在最后：六大原则不是-“教条”，而是-“工具”" class="headerlink" title="写在最后：六大原则不是 “教条”，而是 “工具”"></a>写在最后：六大原则不是 “教条”，而是 “工具”</h2><p>很多人学完这些原则后会陷入 “过度设计” 的误区 —— 为了凑齐原则，写了一堆复杂的接口和类，反而让代码更难维护。</p><p>其实这六大原则的核心目标是一致的：<strong>降低耦合、提高内聚、让代码更易扩展和维护</strong>。实际开发中，不需要强行遵守每一条，而是要根据场景灵活取舍（比如简单的工具类，用继承可能比组合更简单）。</p><p>记住：<strong>好的设计不是 “符合多少原则”，而是 “能解决当前问题，且能应对未来的合理变化”。</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从“不会用”到“离不开”：Theo Mandel人机交互设计“黄金三原则”</title>
      <link href="/2025/09/02/03%20Mandel%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E9%BB%84%E9%87%91%E4%B8%89%E5%8E%9F%E5%88%99/"/>
      <url>/2025/09/02/03%20Mandel%E4%BA%BA%E6%9C%BA%E4%BA%A4%E4%BA%92%E8%AE%BE%E8%AE%A1%E9%BB%84%E9%87%91%E4%B8%89%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>上周去办理携号转网，营业厅工作人员告诉我，要给10086发一串文字，然后获得一个授权码才行。这是我忽然发现，自己名下要转网的那个手机号卡在女儿的手机上。当时我想：“女儿才12岁，以前只是用微信，从来没发过短信，让她现在操作一下，行不行啊”。我还是决定试一试，因为从营业厅跑回家里有点折腾。我编辑好短信内容，然后在微信发给女儿，并告诉她要发短信给10086。然后，拿出另一个手机，准备打开微信视频一步步告诉女儿怎么做。没想到，还没有打通微信视频电话，女儿就回复了她收到的客服短信。我一边夸她真厉害，一边有点惊讶。<br>这让我想起了Theo Mandel的人机交互三原则，我猜也许就是这套设计原则，让没有发过短信的女儿能快速的知道怎么用短信APP。现在就让我们来看看它们是什么吧。</p><p>先说个反面教材。你有没有过这样的经历：打开一款 APP，翻来覆去找不到想要的功能；操作软件时，误点一步就陷入 “无法回头” 的困境；明明是同品牌的产品，不同界面的按钮位置、操作逻辑却大相径庭……</p><p>起始，这些让人 “抓狂” 的体验，本质上都是人机交互设计的缺失。而早在多年前，人机交互领域的专家 Theo Mandel 就提出了被誉为界面设计 “黄金法则” 的三原则，为解决这些问题提供了清晰的方向。这三个原则其实很简单。</p><h2 id="置于用户控制之下：让用户做-“主人”"><a href="#置于用户控制之下：让用户做-“主人”" class="headerlink" title="置于用户控制之下：让用户做 “主人”"></a>置于用户控制之下：让用户做 “主人”</h2><blockquote><p>[!quote]<br>“用户应该是控制系统的人，而不是被系统支配的人”</p></blockquote><p>这是 Theo Mandel “置于用户控制之下” 原则的核心。比如，当你在编辑文档时，不小心删除了大段文字，若没有 “撤销” 功能，之前的心血可能瞬间白费。又或者，当你下载文件时，看不到进度、无法暂停或取消，估计会焦虑吧，这种 “失控感” 会直接拉低产品好感度。​</p><p><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901130146014.png" alt="image.png"></p><p>真正符合这一原则的设计，会时刻给用户 “掌控感”：点击按钮后，按钮会变色、震动或弹出提示，告知用户 “操作已被接收”；提供明确的 “撤销 &#x2F; 重做” 选项，允许用户修正错误；支持自定义设置，比如调整字体大小、更改界面主题、设置常用功能快捷键等。</p><p>就像我们常用的办公软件，无论是 Word 的 Ctrl+Z 撤销，还是 Excel 的自定义快速访问工具栏，都在践行这一原则，让用户能按照自己的节奏和习惯使用产品。<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901130325626.png" alt="image.png"></p><h2 id="减轻用户记忆负担：别让用户-“费脑子”"><a href="#减轻用户记忆负担：别让用户-“费脑子”" class="headerlink" title="减轻用户记忆负担：别让用户 “费脑子”"></a>减轻用户记忆负担：别让用户 “费脑子”</h2><blockquote><p>[!quote]<br>“人的记忆是有限的，好的设计不该让用户拼命记东西”</p></blockquote><p>这是 “减轻用户记忆负担” 原则的关键。生活中，我们很难记住每一个 APP 的登录密码，所以 “记住密码”“短信验证码登录” 功能成了标配。<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901132032634.png" alt="image.png"></p><p>这一原则要求设计师将 “需要用户记忆的信息” 转化为 “界面上直观可见的提示”：在搜索框输入关键词时，自动补全可能的选项；使用大众熟悉的图标，比如用 “垃圾桶” 代表删除、用 “信封” 代表邮件；减少操作步骤，比如购物 APP 的 “一键下单”，避免让用户在多个页面间反复跳转。</p><h2 id="保持界面的一致性：让用户-“不迷路”"><a href="#保持界面的一致性：让用户-“不迷路”" class="headerlink" title="保持界面的一致性：让用户 “不迷路”"></a>保持界面的一致性：让用户 “不迷路”</h2><blockquote><p>[!quote]<br>“当用户在一个地方学会的操作，在另一个地方也能适用”</p></blockquote><p>这是 “保持界面一致性” 原则的核心逻辑。<br>我女儿之所以会发短信，是因为短信的发送操作逻辑和微信的是一样的（当然，这个是微信向短信学习的，但是这也符合“减轻用户记忆原则”）。<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250901131722067.png" alt="image.png"></p><p>如果你在微信里习惯了 “长按消息弹出菜单”，到了另一款社交软件，却需要 “双击消息” 才能触发相同功能；如果你在手机系统里用 “上滑关闭 APP”，到了某款应用内，却需要 “点击叉号” 关闭页面，这种 “割裂感” 会让用户频繁出错，甚至放弃使用产品。<br>符合一致性原则的设计，会在视觉和逻辑上保持统一：同一产品内，导航栏要么都在顶部，要么都在底部；相同功能的按钮，颜色、形状、位置要固定，比如 “确认” 按钮多为蓝色、放在右侧，“取消” 按钮多为灰色、放在左侧；遵循平台通用规范，比如电脑端 Ctrl+C 复制、Ctrl+V 粘贴，手机端点击返回键回到上一页。这种 “熟悉感” 能降低用户的学习成本，让用户快速适应产品，就像无论用哪款主流浏览器，“前进 &#x2F; 后退” 按钮的位置和功能都基本一致，无需重新学习就能上手。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>Theo Mandel 的这三原则，看似简单，却精准击中了人机交互的核心 ——“以用户为中心”。对于设计师而言，它们不是死板的规则，而是检验设计是否 “好用” 的标尺；对于用户而言，这些原则背后的设计，藏着产品 “是否懂我” 的细节。当一款产品能让用户感受到 “掌控感”“轻松感”“熟悉感” 时，从 “难用” 到 “离不开” 的转变，也就水到渠成了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用Streamlit快速搭建ChatBot</title>
      <link href="/2025/09/02/02%20%E7%94%A8Streamlit%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAChatBot/"/>
      <url>/2025/09/02/02%20%E7%94%A8Streamlit%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAChatBot/</url>
      
        <content type="html"><![CDATA[<p>如果你是一个开发人员，或者一个计算机专业的老师或学生，有时候你需要验证或者展示某个技术或者应用场景。比如，我们想要验证一些某个大模型的对话交互能力，或者基于这个大模型开发一个Agent。此时我们可以通过调用大模型的API或者通过ollama这样的工具在命令行中和它交互。<br>但是，有的时候我们要跟直观的展示或者验证，这是就离不开搭建一个前端UI。</p><p>你能想到什么？Vue、React、Angular等等这些前端技术，然后搭建一个UI界面吗？当然可以，但是还是有点麻烦，且不说假设你是一个后端开发人员，掌握这个前端技术需要一点时间。即便是你本来就是一个全站工程师，啥都会，但是也许你只是临时验证或者演示一下你的技术，这个前端用完就会被抛弃掉。再辛辛苦苦搭建一个前端展示页面就显得有点得不偿失了。</p><p>那如果你懂python开发，有没有一种技术可以满足下面的要求：</p><ul><li>极低的开发门槛：几行Python代码就能创建一个包含各种组件的网页前端</li><li>部署打包简单：一行命令就可以本地启动，也可以快速部署到主流的云服务器上托管</li><li>支持热重载：修改代码后页面自动刷新，无需重启服务器</li><li>内置丰富的UI组件：主流的滑块、按钮、表格、表单等等组件都支持</li><li>强大的数据可视化展示支撑：完美支持pandas、matplotlib、seaborn、Plotly、scikit-learn等这些数据分析和展示功能。</li></ul><p>答案是streamlit。今天通过一个简单的例子展示Streamlit提供的强大的原型开发能力，几行代码搭建出一个AI ChatBot。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>可以通过pip conda等安装streamlit，但是我建议使用uv，如果你不熟悉uv，可以参考我之前写的这篇文章：<a href="https://zhuanlan.zhihu.com/p/1944731086295900442">强大的Python包和项目管理工具 uv快速入门 - 知乎</a>。</p><p>现在假设我们创建好了uv项目，接下来执行下面的命令安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add streamlit </span><br></pre></td></tr></table></figure><p>uv会分析依赖，然后安装streamlit。</p><h2 id="ChatBot开发"><a href="#ChatBot开发" class="headerlink" title="ChatBot开发"></a>ChatBot开发</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>我们的需求很简单：以网页的形式显示一个聊天对话框，页面包含三个部分：</p><ol><li>标题：ChatBot</li><li>消息显示区域：用于显示用户的提问和Bot的回答</li><li>聊天输入窗口：用于用户输入和发送提问</li></ol><p>整个逻辑是：</p><ol><li>用户输入聊天内容</li><li>聊天内容被后端的大模型（这里使用智谱AI）接收，然后返回问题</li><li>前端接收到返回的文本内容后，显示在消息区域。</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>为了完成上面的需求，我们需要安装两个依赖：</p><ol><li>streamlit: 用于快是实现前端窗口布局</li><li>zhipuai: 用于调用智谱AI的大模型能量。<br>因此，我们首先在uv项目的依赖中添加如下：</li></ol><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;streamlit&gt;=1.49.0&quot;</span>,</span><br><span class="line">     <span class="string">&quot;zhipuai&gt;=2.0.0&quot;</span>, </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后执行下面的uv安装命令来安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv sync</span><br></pre></td></tr></table></figure><p>接下来编写主程序main.py实现上述需求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> streamlit <span class="keyword">as</span> st</span><br><span class="line"><span class="keyword">import</span> zhipuai</span><br><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化智谱AI客户端（请将API_KEY替换为您自己的密钥）</span></span><br><span class="line">client = ZhipuAI(api_key=<span class="string">&quot;YOUR_API_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 设置页面标题</span></span><br><span class="line">    st.title(<span class="string">&quot;ChatBot&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化会话状态以存储聊天历史</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> st.session_state:</span><br><span class="line">        st.session_state.messages = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示聊天历史</span></span><br><span class="line">    <span class="keyword">for</span> message <span class="keyword">in</span> st.session_state.messages:</span><br><span class="line">        <span class="keyword">with</span> st.chat_message(message[<span class="string">&quot;role&quot;</span>]):</span><br><span class="line">            st.markdown(message[<span class="string">&quot;content&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 聊天输入框</span></span><br><span class="line">    <span class="keyword">if</span> prompt := st.chat_input(<span class="string">&quot;请输入您的问题...&quot;</span>):</span><br><span class="line">        <span class="comment"># 添加用户消息到会话状态</span></span><br><span class="line">        st.session_state.messages.append(&#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, </span><br><span class="line">            <span class="string">&quot;content&quot;</span>: prompt</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 显示用户消息</span></span><br><span class="line">        <span class="keyword">with</span> st.chat_message(<span class="string">&quot;user&quot;</span>):</span><br><span class="line">            st.markdown(prompt)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 调用智谱AI API并流式输出结果</span></span><br><span class="line">        <span class="keyword">with</span> st.chat_message(<span class="string">&quot;assistant&quot;</span>):</span><br><span class="line">            <span class="comment"># 创建一个占位符用于流式更新</span></span><br><span class="line">            response_placeholder = st.empty()</span><br><span class="line">            full_response = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用智谱AI的聊天接口，启用流式响应</span></span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;glm-4&quot;</span>,  <span class="comment"># 使用智谱AI的GLM-4模型</span></span><br><span class="line">                messages=[&#123;</span><br><span class="line">                    <span class="string">&quot;role&quot;</span>: m[<span class="string">&quot;role&quot;</span>], </span><br><span class="line">                    <span class="string">&quot;content&quot;</span>: m[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">                &#125; <span class="keyword">for</span> m <span class="keyword">in</span> st.session_state.messages],</span><br><span class="line">                stream=<span class="literal">True</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理流式响应</span></span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">                <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content:</span><br><span class="line">                    full_response += chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">                    <span class="comment"># 更新占位符内容</span></span><br><span class="line">                    response_placeholder.markdown(full_response + <span class="string">&quot;▌&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 最终更新显示完整响应</span></span><br><span class="line">            response_placeholder.markdown(full_response)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加助手响应到会话状态</span></span><br><span class="line">        st.session_state.messages.append(&#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, </span><br><span class="line">            <span class="string">&quot;content&quot;</span>: full_response</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>代码说明：</p><ol><li>client &#x3D; ZhipuAI(api_key&#x3D;”YOUR_API_KEY”) 这里创建了智谱AI的对象，用于链接后端的大模型，这里记得输入你的API KEY</li><li>st.session_state.messages ：是一个streamlit的消息显示组件，它支持流式输出</li><li>st.chat_input：是一个消息输入组件</li><li>st.markdown(prompt)： 将我们的输入内容转化为markdown形式，这样更有利于LLM理解</li></ol><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>执行下面的命令求可以启动streamlit服务，同时它会打开浏览器并定位到  <a href="http://localhost:8501/">http://localhost:8501</a> 网址。<br>最终的显示效果如下：<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250829141419739.png" alt="image.png"></p><p>可以看到，我们只需要几行Python代码就可以快速的实现一个聊天机器人。这对于技术验证和演示甚至是产品的快速原型设计都非常的高效。</p><p>详细的streamlit 使用参考可以查看其官网的文档：<a href="https://docs.streamlit.io/develop/tutorials">Tutorials - Streamlit Docs</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强大的python包和项目管理工具-uv快速入门</title>
      <link href="/2025/09/02/01%20uv%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2025/09/02/01%20uv%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>一个Rust编写的极速Python包和项目管理工具。</p><p>uv据说是一个工具替代 pip、pip-tools、pipx、poetry、pyenv、twine、virtualenv 等，而且比pip快10-100倍，支持对不同版本Python的安装和管理，今天就来安装实验一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Windows 下用下面的脚本安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -ExecutionPolicy ByPass -c &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span><br></pre></td></tr></table></figure><p>Mac 和Linux用下面的脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf https://astral.sh/uv/install.sh | sh</span><br></pre></td></tr></table></figure><p>脚本命令成功执行之后，还要根据提示将安装目录的bin放到系统的环境变量中，这样就可以在命令行中使用uv命令了。然后重启命令行工具就可以使用uv命令了。</p><h2 id="几个常用的uv功能"><a href="#几个常用的uv功能" class="headerlink" title="几个常用的uv功能"></a>几个常用的uv功能</h2><p>如果你想了解它详细的使用功能，可以看在线的中文文档。<a href="https://uv.doczh.com/">https://uv.doczh.com/</a> 。这里说几个常用的uv功能。</p><h3 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h3><p>如果使用pip或者conda管理项目，通常是创建一个文件夹，然后在下面创建虚拟环境。但是在uv中，可以通过下面的命令创建一个项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv init myuvproject</span><br></pre></td></tr></table></figure><p>执行上述命令后会在当前目录下生成一个名为myuvproject文件夹，这就是我们项目的根目录，其中包含下面几个文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.gitignore</span><br><span class="line">.python-version</span><br><span class="line">main.py</span><br><span class="line">pyproject.toml</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><ul><li>.gitignore: git的忽略配置文件</li><li>.python-version: 指定了项目的python版本</li><li>main.py: 保护一个简单的main函数，用于测试项目是否可以运行</li><li>README.md : 生成一个简单的项目介绍的markdown文件</li><li>pyproject.toml: 这个是uv管理项目的核心文件，通过它可以组织项目的依赖、定义运行的python版本等等。初始的结构如下</li></ul><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name</span> = <span class="string">&quot;myuvproject&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Add your description here&quot;</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">&quot;&gt;=3.13&quot;</span></span><br><span class="line"><span class="attr">dependencies</span> = []</span><br></pre></td></tr></table></figure><p>创建好项目后，要做的第一件事是同步项目依赖，执行下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uv sync</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你会看到类似下面的输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Using CPython 3.13.5 interpreter at: C:\Python313\python.exe</span><br><span class="line">Creating virtual environment at: .venv</span><br><span class="line">Resolved 1 package in 8ms                                                                        </span><br><span class="line">Audited in 0.04ms</span><br></pre></td></tr></table></figure><p>很明显，它帮我们创建python虚拟环境。那么接下来我们来做一些实验，理解uv是如何管理依赖的。</p><h3 id="管理依赖"><a href="#管理依赖" class="headerlink" title="管理依赖"></a>管理依赖</h3><p>假设我们有一个项目需求，要访问某个网址来抓取网页。此时可能要用到requests这个依赖。在uv中新增一个依赖可以用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add requests</span><br></pre></td></tr></table></figure><p>其输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Resolved 6 packages in 581ms</span><br><span class="line">Prepared 5 packages in 934ms</span><br><span class="line">Installed 5 packages in 23ms</span><br><span class="line"> + certifi==2025.8.3                                                                        </span><br><span class="line"> + charset-normalizer==3.4.3                                                                     </span><br><span class="line"> + idna==3.10                                                                                    </span><br><span class="line"> + requests==2.32.5                                                                              </span><br><span class="line"> + urllib3==2.5.0</span><br></pre></td></tr></table></figure><p>可以看到它自动计算requests这个包的依赖并进行安装，而且速度比pip和conda都要快很多。<br>此时，我们再看project.toml文件就会发现dependences中增加了这个包的描述</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;requests&gt;=2.32.5&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在.venv的虚拟机目录下也正确的增加了依赖包<br><img src="https://raw.githubusercontent.com/bsneric/note-gen-image-sync/main/20250829115101936.png" alt="image.png"></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>现在我们在main.py中增加一段验证代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    response = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.status_code)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>通过uv命令运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv run main.py</span><br></pre></td></tr></table></figure><p>结果显示如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure><p>说明uv正确的加载了依赖并执行了代码。</p><p>如果我们拿到一个已有的python项目，可能其已经提供了一个requirements.txt来包含所需要的依赖，那么可以通过下面的命令导入这些依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uv add -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="一些常用的命令"><a href="#一些常用的命令" class="headerlink" title="一些常用的命令"></a>一些常用的命令</h3><p>下列一些常用的uv命令</p><ul><li>uv init: 创建新 Python 项目</li><li>uv add: 为项目添加依赖</li><li>uv remove: 从项目移除依赖</li><li>uv sync: 同步项目依赖到环境</li><li>uv lock: 为项目依赖创建锁文件</li><li>uv run: 在项目环境中运行命令</li><li>uv tree: 查看项目依赖树</li><li>uv build: 构建项目为分发包</li><li>uv publish: 发布项目到包索引</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> uv </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
